{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\forms\\\\act-form\\\\act-form.js\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { ErrorMessage, Form, Formik } from \"formik\";\nimport TextField from \"@material-ui/core/TextField\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button } from \"@material-ui/core\";\nimport { ActFormValidation } from \"../../parts/validation/act-form-validation\";\nimport { ProductsTable } from \"./products-table\";\nimport ProductsDialog from \"./products-dialog\";\nimport FormikField from \"../../roles/sysadmin/formik-field\";\nimport { ACT_URL, makeRequest } from \"../../parts/util/request-util\";\nexport var ActForm = function ActForm(props) {\n  var invoice = props.invoice;\n  var EMPTY_PRODUCT = {\n    id: 0,\n    invoiceId: invoice.id,\n    productStatus: \"\",\n    lostQuantity: 0,\n    comment: \"\",\n    name: \"\",\n    quantity: 0,\n    quantityMeasure: \"\",\n    price: 0,\n    currency: \"\",\n    mass: \"\",\n    massMeasure: \"\"\n  };\n\n  var _useState = useState(EMPTY_PRODUCT),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedProduct = _useState2[0],\n      setSelectedProduct = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      productDialogOpen = _useState4[0],\n      setProductDialogOpen = _useState4[1];\n\n  var _useState5 = useState(invoice.products),\n      _useState6 = _slicedToArray(_useState5, 2),\n      products = _useState6[0],\n      setProducts = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      count = _useState8[0],\n      setCount = _useState8[1];\n\n  var useStyles = makeStyles(function () {\n    return {\n      formControl: {\n        marginTop: 20,\n        minWidth: \"100%\"\n      }\n    };\n  });\n  var classes = useStyles();\n  useEffect(function () {\n    setProducts(invoice.products);\n  }, [invoice.products]);\n\n  var handleTableRowClick = function handleTableRowClick(product) {\n    setSelectedProduct(product);\n    setProductDialogOpen(true);\n  };\n\n  var handleProductDialogClose = function handleProductDialogClose() {\n    setSelectedProduct(EMPTY_PRODUCT);\n    setProductDialogOpen(false);\n  };\n\n  var handleProductDialogSubmit = function handleProductDialogSubmit(product) {\n    updateProduct(product);\n    setSelectedProduct(EMPTY_PRODUCT);\n    setProductDialogOpen(false);\n  };\n\n  var updateProduct = function updateProduct(product) {\n    var lost = 0;\n    setProducts(function (prevState) {\n      var temp = _toConsumableArray(prevState);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(temp), _step; !(_step = _iterator()).done;) {\n        var el = _step.value;\n\n        if (el.id === product.id) {\n          el.id = product.id;\n          el.productStatus = product.productStatus;\n          el.lostQuantity = product.lostQuantity;\n\n          if (product.lostQuantity > 0) {\n            lost++;\n          }\n\n          el.comment = product.comment;\n          el.name = product.name;\n          el.quantity = product.quantity;\n          el.quantityMeasure = product.quantityMeasure;\n          el.price = product.price;\n          el.currency = product.currency;\n          el.mass = product.mass;\n          el.massMeasure = product.massMeasure;\n        }\n      }\n\n      setCount(lost);\n      return temp;\n    });\n  };\n\n  var date = new Date();\n  var today = date.toISOString().substring(0, date.toISOString().indexOf(\"T\"));\n\n  var handleSubmit = function handleSubmit(values) {\n    var statusProducts = [];\n    products.forEach(function (p) {\n      if (p.productStatus === \"ACCEPTED\") {\n        p.comment = \"delivered\";\n        p.productStatus = \"DELIVERED\";\n      }\n\n      statusProducts.push(p);\n    });\n    var act = {};\n    act.invoiceId = invoice.id;\n    act.registrationDate = today;\n    act.consigneeWorker = values.consigneeWorker;\n    act.products = statusProducts;\n\n    var saveActRequest = function saveActRequest(act) {\n      return _regeneratorRuntime.async(function saveActRequest$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(makeRequest(\"POST\", ACT_URL, act));\n\n            case 2:\n              if (props.onSave) {\n                props.onSave();\n              }\n\n              props.onClose();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    saveActRequest(act);\n  };\n\n  return React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      consigneeWorker: \"\",\n      productsCount: count\n    },\n    onSubmit: handleSubmit,\n    validationSchema: ActFormValidation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, React.createElement(FormControl, {\n      className: classes.formControl,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, React.createElement(Grid, {\n      item: true,\n      md: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }, React.createElement(TextField, {\n      style: {\n        width: \"100%\"\n      },\n      name: \"driver\",\n      label: \"Driver\",\n      type: \"text\",\n      id: \"driver\",\n      disabled: true,\n      defaultValue: invoice.driver.name + \" \" + invoice.driver.surname,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 37\n      }\n    })), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 33\n      }\n    }, React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"consigneeWorker\",\n      label: \"Consignee worker\",\n      formikFieldName: \"consigneeWorker\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 37\n      }\n    }))), React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }), React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }, React.createElement(TextField, {\n      style: {\n        width: \"100%\"\n      },\n      name: \"shipper\",\n      label: \"Shipper\",\n      type: \"text\",\n      id: \"shipper\",\n      disabled: true,\n      defaultValue: invoice.shipper.address.country + \" \" + invoice.shipper.address.city + \" \" + invoice.shipper.address.street + \" \" + invoice.shipper.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 37\n      }\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    }, React.createElement(TextField, {\n      style: {\n        width: \"100%\"\n      },\n      name: \"consignee\",\n      label: \"Consignee\",\n      type: \"text\",\n      id: \"consignee\",\n      disabled: true,\n      defaultValue: invoice.consignee.address.country + \" \" + invoice.consignee.address.city + \" \" + invoice.consignee.address.street + \" \" + invoice.consignee.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 37\n      }\n    })))), React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }), React.createElement(FormControl, {\n      className: classes.formControl,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }, React.createElement(InputLabel, {\n      id: \"demo-simple-select-label\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, \"Products\"), React.createElement(ProductsTable, {\n      editable: true,\n      products: products,\n      onRowClick: handleTableRowClick,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 29\n      }\n    }), React.createElement(TextField, {\n      name: \"productsCount\",\n      type: \"number\",\n      disabled: true,\n      onChange: formProps.handleChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    }, count), React.createElement(\"label\", {\n      style: {\n        color: \"#f50057\",\n        fontSize: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 29\n      }\n    }, React.createElement(ErrorMessage, {\n      name: \"productsCount\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 33\n      }\n    })), React.createElement(ProductsDialog, {\n      open: productDialogOpen,\n      initProductState: selectedProduct,\n      onSubmit: handleProductDialogSubmit,\n      onClose: handleProductDialogClose,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 29\n      }\n    })), React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }), React.createElement(\"div\", {\n      className: \"btn-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 29\n      }\n    }, \"Save act\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: props.onClose,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 29\n      }\n    }, \"Cancel\")));\n  }));\n};","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/forms/act-form/act-form.js"],"names":["React","useEffect","useState","ErrorMessage","Form","Formik","TextField","makeStyles","FormControl","InputLabel","Grid","Button","ActFormValidation","ProductsTable","ProductsDialog","FormikField","ACT_URL","makeRequest","ActForm","props","invoice","EMPTY_PRODUCT","id","invoiceId","productStatus","lostQuantity","comment","name","quantity","quantityMeasure","price","currency","mass","massMeasure","selectedProduct","setSelectedProduct","productDialogOpen","setProductDialogOpen","products","setProducts","count","setCount","useStyles","formControl","marginTop","minWidth","classes","handleTableRowClick","product","handleProductDialogClose","handleProductDialogSubmit","updateProduct","lost","prevState","temp","el","date","Date","today","toISOString","substring","indexOf","handleSubmit","values","statusProducts","forEach","p","push","act","registrationDate","consigneeWorker","saveActRequest","onSave","onClose","productsCount","formProps","width","driver","surname","shipper","address","country","city","street","email","consignee","handleChange","color","fontSize"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {ErrorMessage, Form, Formik} from \"formik\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {ActFormValidation} from \"../../parts/validation/act-form-validation\";\r\nimport {ProductsTable} from \"./products-table\";\r\nimport ProductsDialog from \"./products-dialog\";\r\nimport FormikField from \"../../roles/sysadmin/formik-field\";\r\nimport {ACT_URL, makeRequest} from \"../../parts/util/request-util\";\r\n\r\nexport const ActForm = (props) => {\r\n    const invoice = props.invoice;\r\n    const EMPTY_PRODUCT = {\r\n        id: 0,\r\n        invoiceId: invoice.id,\r\n        productStatus: \"\",\r\n        lostQuantity: 0,\r\n        comment: \"\",\r\n        name: \"\",\r\n        quantity: 0,\r\n        quantityMeasure: \"\",\r\n        price: 0,\r\n        currency: \"\",\r\n        mass: \"\",\r\n        massMeasure: \"\",\r\n    };\r\n    const [selectedProduct, setSelectedProduct] = useState(EMPTY_PRODUCT);\r\n    const [productDialogOpen, setProductDialogOpen] = useState(false);\r\n    const [products, setProducts] = useState(invoice.products);\r\n    const [count, setCount] = useState(0);\r\n\r\n    const useStyles = makeStyles(() => ({\r\n        formControl: {\r\n            marginTop: 20,\r\n            minWidth: \"100%\",\r\n        }\r\n    }));\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setProducts(invoice.products);\r\n    }, [invoice.products]);\r\n\r\n    const handleTableRowClick = (product) => {\r\n        setSelectedProduct(product);\r\n        setProductDialogOpen(true);\r\n    };\r\n\r\n    const handleProductDialogClose = () => {\r\n        setSelectedProduct(EMPTY_PRODUCT);\r\n        setProductDialogOpen(false);\r\n    };\r\n\r\n    const handleProductDialogSubmit = (product) => {\r\n        updateProduct(product);\r\n        setSelectedProduct(EMPTY_PRODUCT);\r\n        setProductDialogOpen(false);\r\n    };\r\n\r\n    const updateProduct = (product) => {\r\n        let lost = 0;\r\n        setProducts((prevState) => {\r\n            const temp = [...prevState];\r\n            for (let el of temp) {\r\n                if (el.id === product.id) {\r\n                    el.id = product.id;\r\n                    el.productStatus = product.productStatus;\r\n                    el.lostQuantity = product.lostQuantity;\r\n                    if (product.lostQuantity > 0) {\r\n                        lost++;\r\n                    }\r\n                    el.comment = product.comment;\r\n                    el.name = product.name;\r\n                    el.quantity = product.quantity;\r\n                    el.quantityMeasure = product.quantityMeasure;\r\n                    el.price = product.price;\r\n                    el.currency = product.currency;\r\n                    el.mass = product.mass;\r\n                    el.massMeasure = product.massMeasure;\r\n                }\r\n            }\r\n            setCount(lost);\r\n            return temp;\r\n        });\r\n    };\r\n\r\n    let date = new Date();\r\n    let today = date.toISOString().substring(0, date.toISOString().indexOf(\"T\"));\r\n\r\n    const handleSubmit = (values) => {\r\n        let statusProducts = [];\r\n        products.forEach(p => {\r\n            if (p.productStatus === \"ACCEPTED\") {\r\n                p.comment = \"delivered\";\r\n                p.productStatus = \"DELIVERED\";\r\n            }\r\n            statusProducts.push(p);\r\n        })\r\n        const act = {};\r\n        act.invoiceId = invoice.id;\r\n        act.registrationDate = today;\r\n        act.consigneeWorker = values.consigneeWorker;\r\n        act.products = statusProducts;\r\n        const saveActRequest = async (act) => {\r\n            await makeRequest(\"POST\", ACT_URL, act);\r\n            if (props.onSave) {\r\n                props.onSave();\r\n            }\r\n            props.onClose();\r\n        };\r\n        saveActRequest(act);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{\r\n                    consigneeWorker: \"\",\r\n                    productsCount: count\r\n                }}\r\n                onSubmit={handleSubmit}\r\n                validationSchema={ActFormValidation}\r\n            >\r\n                {(formProps) => (\r\n                    <Form>\r\n                        <FormControl className={classes.formControl}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item md={6}>\r\n                                    <TextField style={{width: \"100%\"}}\r\n                                               name=\"driver\"\r\n                                               label=\"Driver\"\r\n                                               type=\"text\"\r\n                                               id=\"driver\"\r\n                                               disabled={true}\r\n                                               defaultValue={invoice.driver.name + \" \"\r\n                                               + invoice.driver.surname}/>\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <FormikField\r\n                                        formikProps={formProps}\r\n                                        id={\"consigneeWorker\"}\r\n                                        label={\"Consignee worker\"}\r\n                                        formikFieldName={\"consigneeWorker\"}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <br/>\r\n\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={6}>\r\n                                    <TextField style={{width: \"100%\"}}\r\n                                               name=\"shipper\"\r\n                                               label=\"Shipper\"\r\n                                               type=\"text\"\r\n                                               id=\"shipper\"\r\n                                               disabled={true}\r\n                                               defaultValue={`${invoice.shipper.address.country} ${invoice.shipper.address.city} ${invoice.shipper.address.street} ${invoice.shipper.email}`}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField style={{width: \"100%\"}}\r\n                                               name=\"consignee\"\r\n                                               label=\"Consignee\"\r\n                                               type=\"text\"\r\n                                               id=\"consignee\"\r\n                                               disabled={true}\r\n                                               defaultValue={`${invoice.consignee.address.country} ${invoice.consignee.address.city} ${invoice.consignee.address.street} ${invoice.consignee.email}`}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormControl>\r\n                        <br/>\r\n\r\n                        <FormControl className={classes.formControl}>\r\n\r\n                            <InputLabel id=\"demo-simple-select-label\">Products</InputLabel>\r\n                            <ProductsTable\r\n                                editable={true}\r\n                                products={products}\r\n                                onRowClick={handleTableRowClick}/>\r\n\r\n                            <TextField name=\"productsCount\"\r\n                                       type=\"number\"\r\n                                       disabled={true}\r\n                                       onChange={formProps.handleChange}\r\n                            >{count}</TextField>\r\n                            <label style={{color: \"#f50057\", fontSize: 10}}>\r\n                                <ErrorMessage name={\"productsCount\"}/>\r\n                            </label>\r\n\r\n                            <ProductsDialog\r\n                                open={productDialogOpen}\r\n                                initProductState={selectedProduct}\r\n                                onSubmit={handleProductDialogSubmit}\r\n                                onClose={handleProductDialogClose}\r\n                            />\r\n                        </FormControl>\r\n                        <br/>\r\n\r\n                        <div className='btn-row'>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                            >\r\n                                Save act\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={props.onClose}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </React.Fragment>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}