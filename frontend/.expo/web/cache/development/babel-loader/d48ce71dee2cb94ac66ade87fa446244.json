{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\roles\\\\dispatcher\\\\product-owners\\\\product-owner-form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormikField from \"../../../parts/util/formik-field\";\nimport { Formik, Form } from \"formik\";\nimport ProductOwnerTypeSelector from \"./product-owner-type-selector\";\nimport CustomDatePicker from \"../../../parts/util/custom-date-picker\";\nimport { ProductFormValidationSchema } from \"../../../parts/validation/product-owner-validation\";\nimport { makeRequest, OWNER_URL, handleRequestError } from \"../../../parts/util/request-util\";\nvar EMPTY_PRODUCT_OWNER = {\n  id: -1,\n  name: \"\",\n  payerAccountNumber: \"\",\n  type: \"\",\n  phone: \"\",\n  address: {\n    country: \"\",\n    city: \"\",\n    street: \"\",\n    house: \"\",\n    flat: \"\"\n  },\n  registrationDate: \"2000-01-01\"\n};\n\nfunction parseProductOwner(values) {\n  return {\n    name: values.name,\n    type: values.companyType,\n    phone: values.phone,\n    address: {\n      country: values.country,\n      city: values.city,\n      street: values.street,\n      house: values.house,\n      flat: values.flat\n    },\n    registrationDate: values.registrationDate\n  };\n}\n\nexport default function ProductOwnerForm(props) {\n  var _this = this;\n\n  var onClose = props.onClose,\n      openToast = props.openToast;\n\n  var _useState = useState(EMPTY_PRODUCT_OWNER),\n      _useState2 = _slicedToArray(_useState, 2),\n      productOwner = _useState2[0],\n      setProductOwner = _useState2[1];\n\n  useEffect(function () {\n    if (props.productOwnerId !== -1) {\n      getProductOwnerById(props.productOwnerId);\n    }\n  }, [props.productOwnerId]);\n\n  function getProductOwnerById(id) {\n    var response;\n    return _regeneratorRuntime.async(function getProductOwnerById$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(makeRequest(\"GET\", OWNER_URL + \"/\" + id));\n\n          case 3:\n            response = _context.sent;\n            setProductOwner(response.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            handleRequestError(_context.t0, openToast);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  function saveProductOwner(client) {\n    return _regeneratorRuntime.async(function saveProductOwner$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(makeRequest(\"POST\", OWNER_URL, client));\n\n          case 3:\n            openToast(\"Client has been saved\", \"success\");\n            setProductOwner(EMPTY_PRODUCT_OWNER);\n            handleClose();\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            handleRequestError(_context2.t0, openToast);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  function updateProductOwner(productOwner) {\n    return _regeneratorRuntime.async(function updateProductOwner$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            productOwner.id = props.productOwnerId;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(makeRequest(\"PUT\", OWNER_URL, productOwner));\n\n          case 4:\n            openToast(\"Client has been updated\", \"success\");\n            setProductOwner(EMPTY_PRODUCT_OWNER);\n            handleClose();\n            _context3.next = 12;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](1);\n            handleRequestError(_context3.t0, openToast);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  }\n\n  var handleClose = function handleClose() {\n    setProductOwner(EMPTY_PRODUCT_OWNER);\n    onClose();\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    var productOwner = parseProductOwner(values);\n\n    if (props.productOwnerId === -1) {\n      saveProductOwner(productOwner);\n    } else {\n      updateProductOwner(productOwner);\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    validationSchema: ProductFormValidationSchema,\n    initialValues: {\n      name: productOwner.name,\n      companyType: productOwner.type,\n      phone: productOwner.phone,\n      country: productOwner.address.country,\n      city: productOwner.address.city,\n      street: productOwner.address.street,\n      house: productOwner.address.house,\n      flat: productOwner.address.flat,\n      registrationDate: productOwner.registrationDate\n    },\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      style: {\n        width: 450\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"name\",\n      label: \"Name\",\n      formikFieldName: \"name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"phone\",\n      label: \"Phone\",\n      formikFieldName: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }), React.createElement(CustomDatePicker, {\n      formikProps: formProps,\n      id: \"registrationDate\",\n      formikFieldName: \"registrationDate\",\n      label: \"Registration date\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }), React.createElement(ProductOwnerTypeSelector, {\n      formikProps: formProps,\n      id: \"companyType\",\n      formikFieldName: \"companyType\",\n      label: \"Company type\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"country\",\n      label: \"Country\",\n      formikFieldName: \"country\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"city\",\n      label: \"City\",\n      formikFieldName: \"city\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"street\",\n      label: \"Street\",\n      formikFieldName: \"street\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"house\",\n      label: \"House\",\n      formikFieldName: \"house\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"flat\",\n      label: \"Flat\",\n      formikFieldName: \"flat\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }), React.createElement(Grid, {\n      style: {\n        marginTop: 15\n      },\n      container: true,\n      justify: \"space-around\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: formProps.listener,\n      style: {\n        width: 120\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 29\n      }\n    }, props.productOwnerId === -1 ? \"Save\" : \"Update\")));\n  }));\n}","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/roles/dispatcher/product-owners/product-owner-form.js"],"names":["React","useState","useEffect","Button","Grid","FormikField","Formik","Form","ProductOwnerTypeSelector","CustomDatePicker","ProductFormValidationSchema","makeRequest","OWNER_URL","handleRequestError","EMPTY_PRODUCT_OWNER","id","name","payerAccountNumber","type","phone","address","country","city","street","house","flat","registrationDate","parseProductOwner","values","companyType","ProductOwnerForm","props","onClose","openToast","productOwner","setProductOwner","productOwnerId","getProductOwnerById","response","data","saveProductOwner","client","handleClose","updateProductOwner","handleSubmit","formProps","width","marginTop","listener"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormikField from \"../../../parts/util/formik-field\";\r\nimport {Formik, Form} from \"formik\";\r\nimport ProductOwnerTypeSelector from \"./product-owner-type-selector\";\r\nimport CustomDatePicker from \"../../../parts/util/custom-date-picker\";\r\nimport {ProductFormValidationSchema} from \"../../../parts/validation/product-owner-validation\";\r\nimport {makeRequest, OWNER_URL, handleRequestError} from \"../../../parts/util/request-util\";\r\n\r\nconst EMPTY_PRODUCT_OWNER = {\r\n    id: -1,\r\n    name: \"\",\r\n    payerAccountNumber: \"\",\r\n    type: \"\",\r\n    phone: \"\",\r\n    address: {country: \"\", city: \"\", street: \"\", house: \"\", flat: \"\"},\r\n    registrationDate: \"2000-01-01\",\r\n};\r\n\r\nfunction parseProductOwner(values) {\r\n    return {\r\n        name: values.name,\r\n        type: values.companyType,\r\n        phone: values.phone,\r\n        address: {\r\n            country: values.country,\r\n            city: values.city,\r\n            street: values.street,\r\n            house: values.house,\r\n            flat: values.flat,\r\n        },\r\n        registrationDate: values.registrationDate,\r\n    };\r\n}\r\n\r\nexport default function ProductOwnerForm(props) {\r\n    const {onClose, openToast} = props;\r\n    const [productOwner, setProductOwner] = useState(EMPTY_PRODUCT_OWNER);\r\n\r\n    useEffect(() => {\r\n        if (props.productOwnerId !== -1) {\r\n            getProductOwnerById(props.productOwnerId);\r\n        }\r\n    }, [props.productOwnerId]);\r\n\r\n\r\n    async function getProductOwnerById(id) {\r\n        try {\r\n            const response = await makeRequest(\"GET\", OWNER_URL + \"/\" + id);\r\n            setProductOwner(response.data);\r\n        } catch (error) {\r\n            handleRequestError(error, openToast);\r\n        }\r\n    }\r\n\r\n    async function saveProductOwner(client) {\r\n        try {\r\n            await makeRequest(\"POST\", OWNER_URL, client);\r\n            openToast(\"Client has been saved\", \"success\");\r\n            setProductOwner(EMPTY_PRODUCT_OWNER);\r\n            handleClose();\r\n        } catch (error) {\r\n            handleRequestError(error, openToast);\r\n        }\r\n    }\r\n\r\n    async function updateProductOwner(productOwner) {\r\n        productOwner.id = props.productOwnerId;\r\n        try {\r\n            await makeRequest(\"PUT\", OWNER_URL, productOwner);\r\n            openToast(\"Client has been updated\", \"success\");\r\n            setProductOwner(EMPTY_PRODUCT_OWNER);\r\n            handleClose();\r\n        } catch (error) {\r\n            handleRequestError(error, openToast);\r\n        }\r\n    }\r\n\r\n\r\n    const handleClose = () => {\r\n        setProductOwner(EMPTY_PRODUCT_OWNER);\r\n        onClose();\r\n    };\r\n\r\n    const handleSubmit = (values) => {\r\n        const productOwner = parseProductOwner(values);\r\n        if (props.productOwnerId === -1) {\r\n            saveProductOwner(productOwner);\r\n        } else {\r\n            updateProductOwner(productOwner);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Formik\r\n                enableReinitialize\r\n                validationSchema={ProductFormValidationSchema}\r\n                initialValues={{\r\n                    name: productOwner.name,\r\n                    companyType: productOwner.type,\r\n                    phone: productOwner.phone,\r\n                    country: productOwner.address.country,\r\n                    city: productOwner.address.city,\r\n                    street: productOwner.address.street,\r\n                    house: productOwner.address.house,\r\n                    flat: productOwner.address.flat,\r\n                    registrationDate: productOwner.registrationDate,\r\n                }}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {(formProps) => (\r\n                    <Form style={{width: 450}}>\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"name\"}\r\n                            label={\"Name\"}\r\n                            formikFieldName={\"name\"}\r\n                        />\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"phone\"}\r\n                            label={\"Phone\"}\r\n                            formikFieldName={\"phone\"}\r\n                        />\r\n                        <CustomDatePicker\r\n                            formikProps={formProps}\r\n                            id=\"registrationDate\"\r\n                            formikFieldName=\"registrationDate\"\r\n                            label=\"Registration date\"\r\n                        />\r\n                        <ProductOwnerTypeSelector\r\n                            formikProps={formProps}\r\n                            id=\"companyType\"\r\n                            formikFieldName=\"companyType\"\r\n                            label=\"Company type\"\r\n                        />\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"country\"}\r\n                            label={\"Country\"}\r\n                            formikFieldName={\"country\"}\r\n                        />\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"city\"}\r\n                            label={\"City\"}\r\n                            formikFieldName={\"city\"}\r\n                        />\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"street\"}\r\n                            label={\"Street\"}\r\n                            formikFieldName={\"street\"}\r\n                        />\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"house\"}\r\n                            label={\"House\"}\r\n                            formikFieldName={\"house\"}\r\n                        />\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"flat\"}\r\n                            label={\"Flat\"}\r\n                            formikFieldName={\"flat\"}\r\n                        />\r\n                        <Grid\r\n                            style={{marginTop: 15}}\r\n                            container\r\n                            justify=\"space-around\"\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                disabled={formProps.listener}\r\n                                style={{width: 120}}\r\n                            >\r\n                                {props.productOwnerId === -1 ? \"Save\" : \"Update\"}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </React.Fragment>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}