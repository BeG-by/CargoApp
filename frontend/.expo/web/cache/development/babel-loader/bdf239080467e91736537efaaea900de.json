{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\roles\\\\owner\\\\owner-content.js\";\n\nimport React, { useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DatePickerField from \"../../parts/layout/date-picker\";\nimport { Button } from \"@material-ui/core\";\nimport useToast from \"../../parts/toast-notification/useToast\";\nimport { DataFormValidation } from \"../../parts/validation/data-form-validation\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport * as XLSX from \"xlsx\";\nimport * as FileSaver from 'file-saver';\nimport { ProfitChart } from \"./profit-chart\";\nimport { handleRequestError, makeRequest, STATS_URL } from \"../../parts/util/request-util\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    infoPiece: {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      padding: 30\n    },\n    btnSubmit: {\n      marginTop: 30,\n      marginLeft: 10,\n      marginRight: 10,\n      marginBottom: 20\n    }\n  };\n});\nvar EMPTY_DATA = {\n  startDate: \"2020-09-13\",\n  profits: [313, 456, 403, 391],\n  losses: [233, 300, 303, 350]\n};\nexport var OwnerContent = function OwnerContent() {\n  var styles = useStyles();\n\n  var _useToast = useToast(),\n      _useToast2 = _slicedToArray(_useToast, 2),\n      toastComponent = _useToast2[0],\n      openToast = _useToast2[1];\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      button = _useState2[0],\n      setButton = _useState2[1];\n\n  var _useState3 = useState(EMPTY_DATA),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chartData = _useState4[0],\n      setChartData = _useState4[1];\n\n  var fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n  var fileExtension = '.xlsx';\n\n  var exportToCSV = function exportToCSV(csvData, fileName) {\n    var ws = XLSX.utils.json_to_sheet(csvData);\n    var wb = {\n      Sheets: {\n        'data': ws\n      },\n      SheetNames: ['data']\n    };\n    var excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    var data = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, fileName + fileExtension);\n    openToast(\"Report is creating...\", \"info\");\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    var url;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = STATS_URL + \"?start=\" + values.startDate + \"&end=\" + values.endDate;\n\n            if (button === \"report\") {\n              makeRequest(\"GET\", url).then(function (res) {\n                var fileName = \"report_\" + values.startDate + \"_\" + values.endDate + \" \" + Date.now();\n                var data = res.data;\n                var totalProfit = 0;\n                var totalLoss = 0;\n\n                for (var i = 0; i < data.length; i++) {\n                  totalProfit = totalProfit + Number(data[i].profit);\n                  totalLoss = totalLoss + Number(data[i].losses);\n                }\n\n                var total = totalProfit - totalLoss;\n                data[0].totalProfit = totalProfit;\n                data[0].totalLoss = totalLoss;\n                data[0].total = total;\n                exportToCSV(data, fileName);\n              }).catch(function (error) {\n                return handleRequestError(error, openToast);\n              });\n            } else {\n              makeRequest(\"GET\", url).then(function (res) {\n                setChartData(transformDataToChartData(res.data));\n              }).catch(function (error) {\n                return handleRequestError(error, openToast);\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var transformDataToChartData = function transformDataToChartData(data) {\n    var dataForChart = {\n      startDate: getStartDate(data),\n      profits: [],\n      losses: []\n    };\n    data.forEach(function (item) {\n      dataForChart.profits.push(Number(item.profit));\n      dataForChart.losses.push(Number(item.losses));\n    });\n    return dataForChart;\n  };\n\n  var getStartDate = function getStartDate(data) {\n    var min = new Date(2050, 0, 1);\n\n    for (var i = 0; i < data.length; i++) {\n      var arr = data[i].date.split(\"-\");\n\n      if (new Date(arr[0], arr[1], arr[2]).getTime() < min.getTime()) {\n        min = new Date(arr[0], arr[1], arr[2]);\n      }\n    }\n\n    return min.getFullYear() + \"-\" + (min.getMonth() - 1) + \"-\" + min.getDate();\n  };\n\n  var date = new Date();\n  var today = date.toISOString().substring(0, date.toISOString().indexOf(\"T\"));\n  return React.createElement(\"main\", {\n    className: \"main-body-without-back\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, React.createElement(\"div\", {\n    className: \"info-content\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, React.createElement(\"div\", {\n    className: \"info-content-column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      startDate: today,\n      endDate: today\n    },\n    validationSchema: DataFormValidation,\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 33\n      }\n    }, React.createElement(\"div\", {\n      className: \"info-content\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 37\n      }\n    }, React.createElement(\"div\", {\n      className: \"info-content-column\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 41\n      }\n    }, React.createElement(Paper, {\n      className: styles.infoPiece + \" table-paper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 45\n      }\n    }, React.createElement(\"h2\", {\n      style: {\n        color: \"#3f51b5\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 49\n      }\n    }, \"Profit and loss data\"), React.createElement(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 49\n      }\n    }, \"Select period you need\"), React.createElement(DatePickerField, {\n      formikProps: formProps,\n      id: \"startDate\",\n      formikFieldName: \"startDate\",\n      label: \"From\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 49\n      }\n    }), React.createElement(DatePickerField, {\n      formikProps: formProps,\n      id: \"endDate\",\n      formikFieldName: \"endDate\",\n      label: \"To\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 49\n      }\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      onClick: function onClick() {\n        setButton(\"report\");\n      },\n      className: styles.btnSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 49\n      }\n    }, \"Create report\"), React.createElement(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      type: \"submit\",\n      onClick: function onClick() {\n        setButton(\"diagram\");\n      },\n      className: styles.btnSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 49\n      }\n    }, \"Show diagram\")))));\n  }), toastComponent), React.createElement(Paper, {\n    className: \"table-paper\",\n    style: {\n      padding: 20,\n      width: \"50%\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 21\n    }\n  }, React.createElement(ProfitChart, {\n    dataProps: chartData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }\n  }), React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 25\n    }\n  })))));\n};\nexport default OwnerContent;","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/roles/owner/owner-content.js"],"names":["React","useState","Form","Formik","Paper","DatePickerField","Button","useToast","DataFormValidation","makeStyles","XLSX","FileSaver","ProfitChart","handleRequestError","makeRequest","STATS_URL","useStyles","theme","infoPiece","flexDirection","alignItems","padding","btnSubmit","marginTop","marginLeft","marginRight","marginBottom","EMPTY_DATA","startDate","profits","losses","OwnerContent","styles","toastComponent","openToast","button","setButton","chartData","setChartData","fileType","fileExtension","exportToCSV","csvData","fileName","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","data","Blob","saveAs","handleSubmit","values","url","endDate","then","res","Date","now","totalProfit","totalLoss","i","length","Number","profit","total","catch","error","transformDataToChartData","dataForChart","getStartDate","forEach","item","push","min","arr","date","split","getTime","getFullYear","getMonth","getDate","today","toISOString","substring","indexOf","formProps","color","width"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Form, Formik} from \"formik\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DatePickerField from \"../../parts/layout/date-picker\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport useToast from \"../../parts/toast-notification/useToast\";\r\nimport {DataFormValidation} from \"../../parts/validation/data-form-validation\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport * as XLSX from \"xlsx\";\r\nimport * as FileSaver from 'file-saver';\r\nimport {ProfitChart} from \"./profit-chart\";\r\nimport {handleRequestError, makeRequest, STATS_URL} from \"../../parts/util/request-util\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    infoPiece: {\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\",\r\n        padding: 30,\r\n    },\r\n    btnSubmit: {\r\n        marginTop: 30,\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n        marginBottom: 20\r\n    }\r\n}));\r\n\r\n\r\nconst EMPTY_DATA = {\r\n    startDate: \"2020-09-13\",\r\n    profits: [313, 456, 403, 391],\r\n    losses: [233, 300, 303, 350],\r\n};\r\n\r\nexport const OwnerContent = () => {\r\n    const styles = useStyles();\r\n    const [toastComponent, openToast] = useToast();\r\n    const [button, setButton] = useState(\"\");\r\n    const [chartData, setChartData] = useState(EMPTY_DATA);\r\n\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const exportToCSV = (csvData, fileName) => {\r\n        const ws = XLSX.utils.json_to_sheet(csvData);\r\n        const wb = {Sheets: {'data': ws}, SheetNames: ['data']};\r\n        const excelBuffer = XLSX.write(wb, {bookType: 'xlsx', type: 'array'});\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n        openToast(\"Report is creating...\", \"info\");\r\n    };\r\n\r\n\r\n    const handleSubmit = async (values) => {\r\n\r\n        let url = `${STATS_URL}?start=${values.startDate}&end=${values.endDate}`;\r\n\r\n        if (button === \"report\") {\r\n\r\n            makeRequest(\"GET\", url)\r\n                .then(res => {\r\n\r\n                        let fileName = \"report_\" + values.startDate + \"_\" + values.endDate + \" \" + Date.now();\r\n                        const data = res.data;\r\n                        let totalProfit = 0;\r\n                        let totalLoss = 0;\r\n\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            totalProfit = totalProfit + Number(data[i].profit);\r\n                            totalLoss = totalLoss + Number(data[i].losses);\r\n                        }\r\n\r\n                        let total = totalProfit - totalLoss;\r\n                        data[0].totalProfit = totalProfit;\r\n                        data[0].totalLoss = totalLoss;\r\n                        data[0].total = total;\r\n                        exportToCSV(data, fileName);\r\n                    }\r\n                )\r\n                .catch(error => handleRequestError(error, openToast))\r\n\r\n\r\n        } else {\r\n\r\n            makeRequest(\"GET\", url)\r\n                .then(res => {\r\n                        setChartData(transformDataToChartData(res.data));\r\n                    }\r\n                )\r\n                .catch(error => handleRequestError(error, openToast))\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const transformDataToChartData = (data) => {\r\n\r\n        const dataForChart = {\r\n            startDate: getStartDate(data),\r\n            profits: [],\r\n            losses: []\r\n        };\r\n\r\n        data.forEach(item => {\r\n            dataForChart.profits.push(Number(item.profit));\r\n            dataForChart.losses.push(Number(item.losses));\r\n        });\r\n\r\n        return dataForChart;\r\n\r\n    };\r\n\r\n\r\n    const getStartDate = (data) => {\r\n\r\n        let min = new Date(2050, 0, 1);\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n            let arr = data[i].date.split(\"-\");\r\n            if (new Date(arr[0], arr[1], arr[2]).getTime() < min.getTime()) {\r\n                min = new Date(arr[0], arr[1], arr[2]);\r\n            }\r\n        }\r\n\r\n        return min.getFullYear() + \"-\" + (min.getMonth() - 1) + \"-\" + min.getDate();\r\n\r\n    };\r\n\r\n\r\n    let date = new Date();\r\n    let today = date.toISOString().substring(0, date.toISOString().indexOf(\"T\"));\r\n\r\n    return (\r\n        <main className=\"main-body-without-back\">\r\n            <div className=\"info-content\">\r\n                <div className=\"info-content-column\">\r\n                    <React.Fragment>\r\n                        <Formik\r\n                            enableReinitialize\r\n                            initialValues={{\r\n                                startDate: today,\r\n                                endDate: today,\r\n                            }}\r\n                            validationSchema={DataFormValidation}\r\n                            onSubmit={handleSubmit}>\r\n                            {(formProps) => (\r\n                                <Form>\r\n                                    <div className=\"info-content\">\r\n                                        <div className=\"info-content-column\">\r\n                                            <Paper className={`${styles.infoPiece} table-paper`}>\r\n                                                <h2 style={{color: \"#3f51b5\"}}>Profit and loss data</h2>\r\n                                                <h4>Select period you need</h4>\r\n\r\n                                                <DatePickerField\r\n                                                    formikProps={formProps}\r\n                                                    id=\"startDate\"\r\n                                                    formikFieldName=\"startDate\"\r\n                                                    label=\"From\"\r\n                                                />\r\n\r\n                                                <DatePickerField\r\n                                                    formikProps={formProps}\r\n                                                    id=\"endDate\"\r\n                                                    formikFieldName=\"endDate\"\r\n                                                    label=\"To\"\r\n                                                />\r\n\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    type=\"submit\"\r\n                                                    onClick={() => {\r\n                                                        setButton(\"report\");\r\n                                                    }}\r\n                                                    className={styles.btnSubmit}\r\n                                                >\r\n                                                    Create report\r\n                                                </Button>\r\n\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"primary\"\r\n                                                    type=\"submit\"\r\n                                                    onClick={() => {\r\n                                                        setButton(\"diagram\");\r\n                                                    }}\r\n                                                    className={styles.btnSubmit}\r\n                                                >\r\n                                                    Show diagram\r\n                                                </Button>\r\n\r\n                                            </Paper>\r\n                                        </div>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                        {toastComponent}\r\n                    </React.Fragment>\r\n\r\n                    <Paper className={`table-paper`}\r\n                           style={{\r\n                               padding: 20,\r\n                               width: \"50%\"\r\n                           }}>\r\n                        <ProfitChart\r\n                            dataProps={chartData}\r\n                        />\r\n                        <div>\r\n\r\n                        </div>\r\n                    </Paper>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default OwnerContent;"]},"metadata":{},"sourceType":"module"}