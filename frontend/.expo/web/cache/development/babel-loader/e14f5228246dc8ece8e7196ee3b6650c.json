{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\roles\\\\sysadmin\\\\client-dialog.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ClientDialogDatePicker from \"./client-dialog-date-picker\";\nimport FormikField from \"./formik-field\";\nimport ClientCompanyTypeSelector from \"./client-company-type-selector\";\nimport { Form, Formik } from \"formik\";\nimport { ClientFormValidationSchema } from \"./validation-schema\";\nimport useToast from \"../../parts/toast-notification/useToast\";\nimport { CLIENTS_URL, handleRequestError, makeRequest } from \"../../parts/util/request-util\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nvar EMPTY_CLIENT = {\n  id: -1,\n  name: \"\",\n  payerAccountNumber: \"\",\n  type: \"SP\",\n  email: \"\",\n  address: {\n    country: \"\",\n    city: \"\",\n    street: \"\",\n    house: \"\",\n    flat: \"\"\n  },\n  registrationDate: new Date()\n};\n\nfunction parseClient(values) {\n  return {\n    name: values.name,\n    payerAccountNumber: values.payerAccountNumber,\n    type: values.companyType,\n    email: values.email,\n    country: values.country,\n    city: values.city,\n    street: values.street,\n    house: values.house,\n    flat: values.flat,\n    registrationDate: values.registrationDate\n  };\n}\n\nexport default function ClientDialog(props) {\n  var _this = this;\n\n  var onSubmit = props.onSubmit,\n      onDelete = props.onDelete,\n      onClose = props.onClose,\n      open = props.open;\n\n  var _useState = useState(EMPTY_CLIENT),\n      _useState2 = _slicedToArray(_useState, 2),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  var _useToast = useToast(),\n      _useToast2 = _slicedToArray(_useToast, 2),\n      toast = _useToast2[0],\n      openToast = _useToast2[1];\n\n  function getClientById(id) {\n    var response;\n    return _regeneratorRuntime.async(function getClientById$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(makeRequest(\"GET\", CLIENTS_URL + (\"/\" + id)));\n\n          case 3:\n            response = _context.sent;\n            setClient(response.data);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            onClose();\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  function saveClient(client) {\n    return _regeneratorRuntime.async(function saveClient$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(makeRequest(\"POST\", CLIENTS_URL, client));\n\n          case 3:\n            openToast(\"Client has been saved\", \"success\");\n            setClient(EMPTY_CLIENT);\n            onSubmit();\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            handleRequestError(_context2.t0, openToast);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  function updateClient(client) {\n    return _regeneratorRuntime.async(function updateClient$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            client.id = props.clientCompanyId;\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(makeRequest(\"PUT\", CLIENTS_URL, client));\n\n          case 4:\n            openToast(\"Client has been updated\", \"success\");\n            setClient(EMPTY_CLIENT);\n            onSubmit();\n            _context3.next = 12;\n            break;\n\n          case 9:\n            _context3.prev = 9;\n            _context3.t0 = _context3[\"catch\"](1);\n            handleRequestError(_context3.t0, openToast);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  }\n\n  function deleteClient() {\n    return _regeneratorRuntime.async(function deleteClient$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(makeRequest(\"DELETE\", CLIENTS_URL + (\"/\" + props.clientCompanyId)));\n\n          case 3:\n            openToast(\"Client has been deleted\", \"success\");\n            setClient(EMPTY_CLIENT);\n            onDelete();\n            _context4.next = 11;\n            break;\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            handleRequestError(_context4.t0, openToast);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  }\n\n  useEffect(function () {\n    if (props.clientCompanyId !== -1) {\n      getClientById(props.clientCompanyId);\n    }\n  }, [props.clientCompanyId]);\n\n  var handleClose = function handleClose() {\n    setClient(EMPTY_CLIENT);\n    onClose();\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    var client = parseClient(values);\n\n    if (props.clientCompanyId === -1) {\n      openToast(\"Email is sending...\", \"info\");\n      saveClient(client);\n    } else {\n      updateClient(client);\n    }\n  };\n\n  var handleDelete = function handleDelete() {\n    if (props.clientCompanyId !== -1) {\n      deleteClient();\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, React.createElement(\"span\", {\n    id: \"form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Client\"), React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }))), React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      name: client.name,\n      payerAccountNumber: client.payerAccountNumber,\n      companyType: client.type,\n      email: client.email,\n      country: client.address.country,\n      city: client.address.city,\n      street: client.address.street,\n      house: client.address.house,\n      flat: client.address.flat,\n      registrationDate: client.registrationDate\n    },\n    onSubmit: handleSubmit,\n    validationSchema: ClientFormValidationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"name\",\n      label: \"Name\",\n      formikFieldName: \"name\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"payerAccountNumber\",\n      label: \"Payer account number\",\n      formikFieldName: \"payerAccountNumber\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"email\",\n      label: \"Email\",\n      formikFieldName: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 33\n      }\n    }), React.createElement(ClientDialogDatePicker, {\n      formikProps: formProps,\n      id: \"registrationDate\",\n      formikFieldName: \"registrationDate\",\n      label: \"Registration date\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }), React.createElement(ClientCompanyTypeSelector, {\n      formikProps: formProps,\n      id: \"companyType\",\n      formikFieldName: \"companyType\",\n      label: \"Company type\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"country\",\n      label: \"Country\",\n      formikFieldName: \"country\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"city\",\n      label: \"City\",\n      formikFieldName: \"city\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"street\",\n      label: \"Street\",\n      formikFieldName: \"street\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"house\",\n      label: \"House\",\n      formikFieldName: \"house\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 33\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"flat\",\n      label: \"Flat\",\n      formikFieldName: \"flat\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 33\n      }\n    }), React.createElement(Grid, {\n      style: {\n        marginTop: 15\n      },\n      container: true,\n      justify: \"space-around\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 33\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: formProps.listener,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 37\n      }\n    }, props.clientCompanyId >= 1 ? \"Update\" : \"Save\")));\n  }))), toast);\n}","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/roles/sysadmin/client-dialog.js"],"names":["React","useEffect","useState","Button","Dialog","DialogContent","DialogTitle","Grid","ClientDialogDatePicker","FormikField","ClientCompanyTypeSelector","Form","Formik","ClientFormValidationSchema","useToast","CLIENTS_URL","handleRequestError","makeRequest","IconButton","CloseIcon","EMPTY_CLIENT","id","name","payerAccountNumber","type","email","address","country","city","street","house","flat","registrationDate","Date","parseClient","values","companyType","ClientDialog","props","onSubmit","onDelete","onClose","open","client","setClient","toast","openToast","getClientById","response","data","saveClient","updateClient","clientCompanyId","deleteClient","handleClose","handleSubmit","handleDelete","formProps","marginTop","listener"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ClientDialogDatePicker from \"./client-dialog-date-picker\";\r\nimport FormikField from \"./formik-field\";\r\n\r\nimport ClientCompanyTypeSelector from \"./client-company-type-selector\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {ClientFormValidationSchema} from \"./validation-schema\";\r\nimport useToast from \"../../parts/toast-notification/useToast\";\r\nimport {CLIENTS_URL, handleRequestError, makeRequest} from \"../../parts/util/request-util\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst EMPTY_CLIENT = {\r\n    id: -1,\r\n    name: \"\",\r\n    payerAccountNumber: \"\",\r\n    type: \"SP\",\r\n    email: \"\",\r\n    address: {country: \"\", city: \"\", street: \"\", house: \"\", flat: \"\"},\r\n    registrationDate: new Date(),\r\n};\r\n\r\nfunction parseClient(values) {\r\n    return {\r\n        name: values.name,\r\n        payerAccountNumber: values.payerAccountNumber,\r\n        type: values.companyType,\r\n        email: values.email,\r\n        country: values.country,\r\n        city: values.city,\r\n        street: values.street,\r\n        house: values.house,\r\n        flat: values.flat,\r\n        registrationDate: values.registrationDate,\r\n    };\r\n}\r\n\r\nexport default function ClientDialog(props) {\r\n    const {onSubmit, onDelete, onClose, open} = props;\r\n    const [client, setClient] = useState(EMPTY_CLIENT);\r\n    const [toast, openToast] = useToast();\r\n\r\n    async function getClientById(id) {\r\n        try {\r\n            let response = await makeRequest(\"GET\", CLIENTS_URL + `/${id}`);\r\n            setClient(response.data);\r\n        } catch (error) {\r\n            onClose();\r\n        }\r\n    }\r\n\r\n    async function saveClient(client) {\r\n        try {\r\n            await makeRequest(\"POST\", CLIENTS_URL, client);\r\n            openToast(\"Client has been saved\", \"success\");\r\n            setClient(EMPTY_CLIENT);\r\n            onSubmit();\r\n        } catch (error) {\r\n            handleRequestError(error, openToast);\r\n        }\r\n    }\r\n\r\n    async function updateClient(client) {\r\n        client.id = props.clientCompanyId;\r\n        try {\r\n            await makeRequest(\"PUT\", CLIENTS_URL, client);\r\n            openToast(\"Client has been updated\", \"success\");\r\n            setClient(EMPTY_CLIENT);\r\n            onSubmit();\r\n        } catch (error) {\r\n            handleRequestError(error, openToast);\r\n        }\r\n    }\r\n\r\n    async function deleteClient() {\r\n        try {\r\n            await makeRequest(\"DELETE\", CLIENTS_URL + `/${props.clientCompanyId}`);\r\n            openToast(\"Client has been deleted\", \"success\");\r\n            setClient(EMPTY_CLIENT);\r\n            onDelete();\r\n        } catch (error) {\r\n            handleRequestError(error, openToast);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.clientCompanyId !== -1) {\r\n            getClientById(props.clientCompanyId);\r\n        }\r\n    }, [props.clientCompanyId]);\r\n\r\n    const handleClose = () => {\r\n        setClient(EMPTY_CLIENT);\r\n        onClose();\r\n    };\r\n\r\n    const handleSubmit = (values) => {\r\n        const client = parseClient(values);\r\n        if (props.clientCompanyId === -1) {\r\n            openToast(\"Email is sending...\" , \"info\")\r\n            saveClient(client);\r\n        } else {\r\n            updateClient(client);\r\n        }\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        if (props.clientCompanyId !== -1) {\r\n            deleteClient();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    <span id=\"form-title\">Client</span>\r\n                    <IconButton aria-label=\"close\"\r\n                                onClick={handleClose}\r\n                    >\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Formik\r\n                        enableReinitialize\r\n                        initialValues={{\r\n                            name: client.name,\r\n                            payerAccountNumber: client.payerAccountNumber,\r\n                            companyType: client.type,\r\n                            email: client.email,\r\n                            country: client.address.country,\r\n                            city: client.address.city,\r\n                            street: client.address.street,\r\n                            house: client.address.house,\r\n                            flat: client.address.flat,\r\n                            registrationDate: client.registrationDate,\r\n                        }}\r\n                        onSubmit={handleSubmit}\r\n                        validationSchema={ClientFormValidationSchema}\r\n                    >\r\n                        {(formProps) => (\r\n                            <Form>\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"name\"}\r\n                                    label={\"Name\"}\r\n                                    formikFieldName={\"name\"}\r\n                                />\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"payerAccountNumber\"}\r\n                                    label={\"Payer account number\"}\r\n                                    formikFieldName={\"payerAccountNumber\"}\r\n                                />\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"email\"}\r\n                                    label={\"Email\"}\r\n                                    formikFieldName={\"email\"}\r\n                                />\r\n\r\n                                <ClientDialogDatePicker\r\n                                    formikProps={formProps}\r\n                                    id=\"registrationDate\"\r\n                                    formikFieldName=\"registrationDate\"\r\n                                    label=\"Registration date\"\r\n                                />\r\n                                <ClientCompanyTypeSelector\r\n                                    formikProps={formProps}\r\n                                    id=\"companyType\"\r\n                                    formikFieldName=\"companyType\"\r\n                                    label=\"Company type\"\r\n                                />\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"country\"}\r\n                                    label={\"Country\"}\r\n                                    formikFieldName={\"country\"}\r\n                                />\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"city\"}\r\n                                    label={\"City\"}\r\n                                    formikFieldName={\"city\"}\r\n                                />\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"street\"}\r\n                                    label={\"Street\"}\r\n                                    formikFieldName={\"street\"}\r\n                                />\r\n\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"house\"}\r\n                                    label={\"House\"}\r\n                                    formikFieldName={\"house\"}\r\n                                />\r\n                                <FormikField\r\n                                    formikProps={formProps}\r\n                                    id={\"flat\"}\r\n                                    label={\"Flat\"}\r\n                                    formikFieldName={\"flat\"}\r\n                                />\r\n\r\n                                <Grid\r\n                                    style={{marginTop: 15}}\r\n                                    container\r\n                                    justify=\"space-around\"\r\n                                >\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        type=\"submit\"\r\n                                        disabled={formProps.listener}\r\n                                    >\r\n                                        {props.clientCompanyId >= 1 ? \"Update\" : \"Save\"}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n            {toast}\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}