{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\map\\\\abstract-map.js\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { GoogleMap, Marker, Polyline, useLoadScript } from \"@react-google-maps/api\";\nimport MarkersList from \"./markers-list.js\";\nimport { GOOGLE_MAP_API_KEY } from \"../keys.json\";\nimport Search from \"./search\";\nimport Locate from \"./locate\";\nimport { countDistanceBetweenMarkers } from \"./utils\";\nexport var API_KEY = GOOGLE_MAP_API_KEY;\nvar MAP_CONTAINER_STYLE = {\n  width: 750,\n  height: 600\n};\nvar MAP_OPTIONS = {\n  disableDefaultUI: true\n};\nvar START_CENTER = {\n  lat: 53.9006011,\n  lng: 27.558972\n};\nvar START_ZOOM = 10;\nvar ZOOM_FOR_PLACE = 13;\nvar PASSED_MARKER_ICON = \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\";\nvar NOT_PASSED_MARKER_ICON = \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\";\nvar POLYLINE_COLOR = \"#00ffff\";\nvar POLYLINE_OPACITY = 5;\nvar LIBRARIES = [\"places\"];\nexport default function AbstractMap(props) {\n  var _this = this;\n\n  var markers = props.markers;\n  var infoWindowComponent = props.infoWindowComponent;\n  var onMapClick = props.onMapClick;\n  var onMarkerClick = props.onMarkerClick;\n  var mapRef = useRef();\n  var handleMapLoad = useCallback(function (map) {\n    mapRef.current = map;\n  }, []);\n\n  var _useLoadScript = useLoadScript({\n    googleMapsApiKey: API_KEY,\n    libraries: LIBRARIES\n  }),\n      isLoaded = _useLoadScript.isLoaded,\n      loadError = _useLoadScript.loadError;\n\n  var handleMapClick = function handleMapClick(event) {\n    onMapClick(event);\n  };\n\n  var handlePlaceSelect = function handlePlaceSelect(lat, lng) {\n    mapRef.current.panTo({\n      lat: lat,\n      lng: lng\n    });\n    mapRef.current.setZoom(ZOOM_FOR_PLACE);\n  };\n\n  var handleLocateClick = function handleLocateClick(lat, lng) {\n    mapRef.current.panTo({\n      lat: lat,\n      lng: lng\n    });\n    mapRef.current.setZoom(ZOOM_FOR_PLACE);\n  };\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps...\";\n  return React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-evenly\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, React.createElement(GoogleMap, {\n    mapContainerStyle: MAP_CONTAINER_STYLE,\n    zoom: START_ZOOM,\n    center: START_CENTER,\n    options: MAP_OPTIONS,\n    onClick: handleMapClick,\n    onLoad: handleMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, React.createElement(Search, {\n    onSelect: handlePlaceSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }), React.createElement(Locate, {\n    onClick: handleLocateClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  })), markers.map(function (marker, i) {\n    return React.createElement(Marker, {\n      key: marker.lng + \"_\" + marker.lat,\n      position: {\n        lat: marker.lat,\n        lng: marker.lng\n      },\n      onClick: function onClick() {\n        return onMarkerClick(marker, i);\n      },\n      icon: marker.isPassed ? PASSED_MARKER_ICON : NOT_PASSED_MARKER_ICON,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 32\n      }\n    });\n  }), React.createElement(Polyline, {\n    geodesic: true,\n    options: {\n      path: markers,\n      strokeColor: POLYLINE_COLOR,\n      strokeOpacity: POLYLINE_OPACITY,\n      strokeWeight: 2,\n      icons: [{\n        offset: \"0\",\n        repeat: \"10px\"\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }), infoWindowComponent), React.createElement(MarkersList, {\n    items: markers,\n    listName: \"Control points\",\n    onRowClick: function onRowClick(pointIndex) {\n      markers.filter(function (marker) {\n        return marker.index === pointIndex;\n      }).map(function (marker) {\n        mapRef.current.panTo(marker);\n        mapRef.current.setZoom(ZOOM_FOR_PLACE);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/map/abstract-map.js"],"names":["React","useCallback","useEffect","useRef","GoogleMap","Marker","Polyline","useLoadScript","MarkersList","GOOGLE_MAP_API_KEY","Search","Locate","countDistanceBetweenMarkers","API_KEY","MAP_CONTAINER_STYLE","width","height","MAP_OPTIONS","disableDefaultUI","START_CENTER","lat","lng","START_ZOOM","ZOOM_FOR_PLACE","PASSED_MARKER_ICON","NOT_PASSED_MARKER_ICON","POLYLINE_COLOR","POLYLINE_OPACITY","LIBRARIES","AbstractMap","props","markers","infoWindowComponent","onMapClick","onMarkerClick","mapRef","handleMapLoad","map","current","googleMapsApiKey","libraries","isLoaded","loadError","handleMapClick","event","handlePlaceSelect","panTo","setZoom","handleLocateClick","display","justifyContent","marker","i","isPassed","path","strokeColor","strokeOpacity","strokeWeight","icons","offset","repeat","pointIndex","filter","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,MAAvC,QAAoD,OAApD;AACA,SAAQC,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,aAArC,QAAyD,wBAAzD;AACA,OAAOC,WAAP;AACA,SAAQC,kBAAR;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP;AACA,SAAQC,2BAAR;AAEA,OAAO,IAAMC,OAAO,GAAGJ,kBAAhB;AACP,IAAMK,mBAAmB,GAAG;AAACC,EAAAA,KAAK,EAAE,GAAR;AAAaC,EAAAA,MAAM,EAAE;AAArB,CAA5B;AACA,IAAMC,WAAW,GAAG;AAACC,EAAAA,gBAAgB,EAAE;AAAnB,CAApB;AACA,IAAMC,YAAY,GAAG;AAACC,EAAAA,GAAG,EAAE,UAAN;AAAkBC,EAAAA,GAAG,EAAE;AAAvB,CAArB;AACA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,cAAc,GAAG,EAAvB;AACA,IAAMC,kBAAkB,GAAG,wDAA3B;AACA,IAAMC,sBAAsB,GAAG,sDAA/B;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,gBAAgB,GAAG,CAAzB;AACA,IAAMC,SAAS,GAAG,CAAC,QAAD,CAAlB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACvC,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB;AACA,MAAMC,mBAAmB,GAAGF,KAAK,CAACE,mBAAlC;AACA,MAAMC,UAAU,GAAGH,KAAK,CAACG,UAAzB;AACA,MAAMC,aAAa,GAAGJ,KAAK,CAACI,aAA5B;AAEA,MAAMC,MAAM,GAAGhC,MAAM,EAArB;AACA,MAAMiC,aAAa,GAAGnC,WAAW,CAAC,UAACoC,GAAD,EAAS;AACvCF,IAAAA,MAAM,CAACG,OAAP,GAAiBD,GAAjB;AACH,GAFgC,EAE9B,EAF8B,CAAjC;;AAPuC,uBAYT9B,aAAa,CAAC;AACxCgC,IAAAA,gBAAgB,EAAE1B,OADsB;AAExC2B,IAAAA,SAAS,EAAEZ;AAF6B,GAAD,CAZJ;AAAA,MAYhCa,QAZgC,kBAYhCA,QAZgC;AAAA,MAYtBC,SAZsB,kBAYtBA,SAZsB;;AAiBvC,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAC9BX,IAAAA,UAAU,CAACW,KAAD,CAAV;AACH,GAFD;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACzB,GAAD,EAAMC,GAAN,EAAc;AACpCc,IAAAA,MAAM,CAACG,OAAP,CAAeQ,KAAf,CAAqB;AAAC1B,MAAAA,GAAG,EAAHA,GAAD;AAAMC,MAAAA,GAAG,EAAHA;AAAN,KAArB;AACAc,IAAAA,MAAM,CAACG,OAAP,CAAeS,OAAf,CAAuBxB,cAAvB;AACH,GAHD;;AAKA,MAAMyB,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC5B,GAAD,EAAMC,GAAN,EAAc;AACpCc,IAAAA,MAAM,CAACG,OAAP,CAAeQ,KAAf,CAAqB;AAAC1B,MAAAA,GAAG,EAAHA,GAAD;AAAMC,MAAAA,GAAG,EAAHA;AAAN,KAArB;AACAc,IAAAA,MAAM,CAACG,OAAP,CAAeS,OAAf,CAAuBxB,cAAvB;AACH,GAHD;;AAKA,MAAImB,SAAJ,EAAe,OAAO,oBAAP;AACf,MAAI,CAACD,QAAL,EAAe,OAAO,iBAAP;AAEf,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,cAAc,EAAE;AAAlC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AACI,IAAA,iBAAiB,EAAEpC,mBADvB;AAEI,IAAA,IAAI,EAAEQ,UAFV;AAGI,IAAA,MAAM,EAAEH,YAHZ;AAII,IAAA,OAAO,EAAEF,WAJb;AAKI,IAAA,OAAO,EAAE0B,cALb;AAMI,IAAA,MAAM,EAAEP,aANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI;AAAK,IAAA,KAAK,EAAE;AAACa,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,cAAc,EAAE;AAAlC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEL,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEG,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CARJ,EAaKjB,OAAO,CAACM,GAAR,CAAY,UAACc,MAAD,EAASC,CAAT,EAAe;AACxB,WAAO,oBAAC,MAAD;AACH,MAAA,GAAG,EAAKD,MAAM,CAAC9B,GAAZ,SAAmB8B,MAAM,CAAC/B,GAD1B;AAEH,MAAA,QAAQ,EAAE;AAACA,QAAAA,GAAG,EAAE+B,MAAM,CAAC/B,GAAb;AAAkBC,QAAAA,GAAG,EAAE8B,MAAM,CAAC9B;AAA9B,OAFP;AAGH,MAAA,OAAO,EAAE;AAAA,eAAMa,aAAa,CAACiB,MAAD,EAASC,CAAT,CAAnB;AAAA,OAHN;AAIH,MAAA,IAAI,EAAED,MAAM,CAACE,QAAP,GAAkB7B,kBAAlB,GAAuCC,sBAJ1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAMH,GAPA,CAbL,EAqBI,oBAAC,QAAD;AACI,IAAA,QAAQ,EAAE,IADd;AAEI,IAAA,OAAO,EAAE;AACL6B,MAAAA,IAAI,EAAEvB,OADD;AAELwB,MAAAA,WAAW,EAAE7B,cAFR;AAGL8B,MAAAA,aAAa,EAAE7B,gBAHV;AAIL8B,MAAAA,YAAY,EAAE,CAJT;AAKLC,MAAAA,KAAK,EAAE,CAAC;AAACC,QAAAA,MAAM,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OAAD;AALF,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBJ,EA+BK5B,mBA/BL,CADJ,EAkCI,oBAAC,WAAD;AACI,IAAA,KAAK,EAAED,OADX;AAEI,IAAA,QAAQ,EAAE,gBAFd;AAGI,IAAA,UAAU,EAAE,oBAAC8B,UAAD,EAAgB;AACxB9B,MAAAA,OAAO,CACF+B,MADL,CACY,UAAAX,MAAM;AAAA,eAAIA,MAAM,CAACY,KAAP,KAAiBF,UAArB;AAAA,OADlB,EAEKxB,GAFL,CAES,UAAAc,MAAM,EAAI;AACXhB,QAAAA,MAAM,CAACG,OAAP,CAAeQ,KAAf,CAAqBK,MAArB;AACAhB,QAAAA,MAAM,CAACG,OAAP,CAAeS,OAAf,CAAuBxB,cAAvB;AACH,OALL;AAMH,KAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCJ,CAFJ,CADJ;AAkDH","sourcesContent":["import React, {useCallback, useEffect, useRef} from \"react\";\r\nimport {GoogleMap, Marker, Polyline, useLoadScript} from \"@react-google-maps/api\";\r\nimport MarkersList from \"./markers-list.js\";\r\nimport {GOOGLE_MAP_API_KEY} from \"../keys.json\";\r\nimport Search from \"./search\";\r\nimport Locate from \"./locate\";\r\nimport {countDistanceBetweenMarkers} from \"./utils\";\r\n\r\nexport const API_KEY = GOOGLE_MAP_API_KEY;\r\nconst MAP_CONTAINER_STYLE = {width: 750, height: 600}\r\nconst MAP_OPTIONS = {disableDefaultUI: true,};\r\nconst START_CENTER = {lat: 53.9006011, lng: 27.558972};\r\nconst START_ZOOM = 10;\r\nconst ZOOM_FOR_PLACE = 13;\r\nconst PASSED_MARKER_ICON = \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\";\r\nconst NOT_PASSED_MARKER_ICON = \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\";\r\nconst POLYLINE_COLOR = \"#00ffff\";\r\nconst POLYLINE_OPACITY = 5;\r\nconst LIBRARIES = [\"places\"];\r\n\r\nexport default function AbstractMap(props) {\r\n    const markers = props.markers;\r\n    const infoWindowComponent = props.infoWindowComponent;\r\n    const onMapClick = props.onMapClick;\r\n    const onMarkerClick = props.onMarkerClick;\r\n\r\n    const mapRef = useRef();\r\n    const handleMapLoad = useCallback((map) => {\r\n        mapRef.current = map;\r\n    }, []);\r\n\r\n\r\n    const {isLoaded, loadError} = useLoadScript({\r\n        googleMapsApiKey: API_KEY,\r\n        libraries: LIBRARIES,\r\n    });\r\n\r\n    const handleMapClick = (event) => {\r\n        onMapClick(event);\r\n    };\r\n\r\n    const handlePlaceSelect = (lat, lng) => {\r\n        mapRef.current.panTo({lat, lng})\r\n        mapRef.current.setZoom(ZOOM_FOR_PLACE)\r\n    }\r\n\r\n    const handleLocateClick = (lat, lng) => {\r\n        mapRef.current.panTo({lat, lng})\r\n        mapRef.current.setZoom(ZOOM_FOR_PLACE)\r\n    }\r\n\r\n    if (loadError) return \"Error loading maps\";\r\n    if (!isLoaded) return \"Loading maps...\";\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div style={{display: \"flex\", justifyContent: \"space-evenly\"}}>\r\n                <GoogleMap\r\n                    mapContainerStyle={MAP_CONTAINER_STYLE}\r\n                    zoom={START_ZOOM}\r\n                    center={START_CENTER}\r\n                    options={MAP_OPTIONS}\r\n                    onClick={handleMapClick}\r\n                    onLoad={handleMapLoad}\r\n                >\r\n                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\r\n                        <Search onSelect={handlePlaceSelect}/>\r\n                        <Locate onClick={handleLocateClick}/>\r\n                    </div>\r\n\r\n                    {markers.map((marker, i) => {\r\n                        return <Marker\r\n                            key={`${marker.lng}_${marker.lat}`}\r\n                            position={{lat: marker.lat, lng: marker.lng}}\r\n                            onClick={() => onMarkerClick(marker, i)}\r\n                            icon={marker.isPassed ? PASSED_MARKER_ICON : NOT_PASSED_MARKER_ICON}\r\n                        />\r\n                    })}\r\n                    <Polyline\r\n                        geodesic={true}\r\n                        options={{\r\n                            path: markers,\r\n                            strokeColor: POLYLINE_COLOR,\r\n                            strokeOpacity: POLYLINE_OPACITY,\r\n                            strokeWeight: 2,\r\n                            icons: [{offset: \"0\", repeat: \"10px\"},],\r\n                        }}\r\n                    />\r\n                    {infoWindowComponent}\r\n                </GoogleMap>\r\n                <MarkersList\r\n                    items={markers}\r\n                    listName={\"Control points\"}\r\n                    onRowClick={(pointIndex) => {\r\n                        markers\r\n                            .filter(marker => marker.index === pointIndex)\r\n                            .map(marker => {\r\n                                mapRef.current.panTo(marker)\r\n                                mapRef.current.setZoom(ZOOM_FOR_PLACE);\r\n                            })\r\n                    }}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}