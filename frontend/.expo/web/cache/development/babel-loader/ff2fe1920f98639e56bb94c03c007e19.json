{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\web_socket\\\\web-socket.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport useToast from \"../components/parts/toast-notification/useToast\";\nimport { connect } from \"react-redux\";\nimport * as Stomp from \"stompjs\";\nimport useActionToast from \"./hooks/action-toast/use-action-toast\";\nimport useNewInvoiceMessageHandler from \"./hooks/handlers/use-new-invoice-message-handler\";\nimport usePointPassMessageHandler from \"./hooks/handlers/use-point-pass-message-handler\";\nimport useNewWaybillMessageHandler from \"./hooks/handlers/use-new-waybill-message-handler\";\nimport useInvoiceUpdateMessageHandler from \"./hooks/handlers/use-invoice-update-message-handler\";\nimport useInvoiceStatusUpdateMessageHandler from \"./hooks/handlers/use-invoice-status-update-message-handler\";\nimport { INVOICE_STATUS_UPDATE_MESSAGE_TYPE, INVOICE_UPDATE_MESSAGE_TYPE, NEW_INVOICE_MESSAGE_TYPE, NEW_WAYBILL_MESSAGE_TYPE, POINT_PASS_MESSAGE_TYPE } from \"./notification-types\";\nimport { WEB_SOCKET_CONNECT_URL } from \"../components/parts/util/request-util\";\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    userId: store.user.id,\n    role: store.user.roles[0]\n  };\n};\n\nvar UNKNOWN_ROLE = 'UNKNOWN';\nexport var WebSocket = connect(mapStateToProps)(function (props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentStompClient = _useState2[0],\n      setCurrentStompClient = _useState2[1];\n\n  var _useToast = useToast(),\n      _useToast2 = _slicedToArray(_useToast, 2),\n      NotificationToastComponent = _useToast2[0],\n      openNotificationToast = _useToast2[1];\n\n  var _useActionToast = useActionToast(),\n      _useActionToast2 = _slicedToArray(_useActionToast, 2),\n      ActionToastComponent = _useActionToast2[0],\n      openActionToast = _useActionToast2[1];\n\n  var _useNewWaybillMessage = useNewWaybillMessageHandler(),\n      _useNewWaybillMessage2 = _slicedToArray(_useNewWaybillMessage, 2),\n      NewWaybillHandlerComponent = _useNewWaybillMessage2[0],\n      handleNewWaybillMessage = _useNewWaybillMessage2[1];\n\n  var _useNewInvoiceMessage = useNewInvoiceMessageHandler(),\n      _useNewInvoiceMessage2 = _slicedToArray(_useNewInvoiceMessage, 2),\n      NewInvoiceHandlerComponent = _useNewInvoiceMessage2[0],\n      handleNewInvoiceMessage = _useNewInvoiceMessage2[1];\n\n  var _usePointPassMessageH = usePointPassMessageHandler(),\n      _usePointPassMessageH2 = _slicedToArray(_usePointPassMessageH, 2),\n      PointPassHandlerComponent = _usePointPassMessageH2[0],\n      handlePointPassMessage = _usePointPassMessageH2[1];\n\n  var _useInvoiceUpdateMess = useInvoiceUpdateMessageHandler(),\n      _useInvoiceUpdateMess2 = _slicedToArray(_useInvoiceUpdateMess, 2),\n      InvoiceUpdateHandlerComponent = _useInvoiceUpdateMess2[0],\n      handleInvoiceUpdateMessage = _useInvoiceUpdateMess2[1];\n\n  var _useInvoiceStatusUpda = useInvoiceStatusUpdateMessageHandler(),\n      _useInvoiceStatusUpda2 = _slicedToArray(_useInvoiceStatusUpda, 2),\n      InvoiceStatusUpdateHandlerComponent = _useInvoiceStatusUpda2[0],\n      handleInvoiceStatusUpdateMessage = _useInvoiceStatusUpda2[1];\n\n  var subscribeToPrivateUrl = function subscribeToPrivateUrl(stompClient) {\n    var privateUrl = \"/user/\" + props.userId + \"/queue/messages\";\n    stompClient.subscribe(privateUrl, onMessageReceive);\n  };\n\n  var onSocketConnect = function onSocketConnect(stompClient) {\n    setCurrentStompClient(stompClient);\n    subscribeToPrivateUrl(stompClient);\n  };\n\n  var onSocketError = function onSocketError() {\n    setCurrentStompClient(null);\n    openNotificationToast(\"Cannot connect to server for real-time notifications\", \"warning\");\n  };\n\n  var connectToServer = function connectToServer() {\n    var SockJs = require(\"sockjs-client\");\n\n    SockJs = new SockJs(WEB_SOCKET_CONNECT_URL);\n    return Stomp.over(SockJs);\n  };\n\n  var onMessageReceive = function onMessageReceive(msg) {\n    var messageData = JSON.parse(msg.body);\n\n    switch (messageData.notificationType) {\n      case NEW_INVOICE_MESSAGE_TYPE:\n        handleNewInvoiceMessage(messageData, openActionToast);\n        break;\n\n      case NEW_WAYBILL_MESSAGE_TYPE:\n        handleNewWaybillMessage(messageData, openActionToast);\n        break;\n\n      case INVOICE_STATUS_UPDATE_MESSAGE_TYPE:\n        handleInvoiceStatusUpdateMessage(messageData, openActionToast, openNotificationToast);\n        break;\n\n      case INVOICE_UPDATE_MESSAGE_TYPE:\n        handleInvoiceUpdateMessage(messageData, openActionToast);\n        break;\n\n      case POINT_PASS_MESSAGE_TYPE:\n        handlePointPassMessage(messageData, openActionToast);\n        break;\n    }\n  };\n\n  useEffect(function () {\n    if (props.role !== UNKNOWN_ROLE) {\n      var stompClient = connectToServer();\n      stompClient.connect({}, function () {\n        return onSocketConnect(stompClient);\n      }, function () {\n        return onSocketError();\n      });\n    }\n  }, [props.role]);\n  return React.createElement(\"div\", {\n    style: {\n      zIndex: 999\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, ActionToastComponent, NotificationToastComponent, NewInvoiceHandlerComponent, PointPassHandlerComponent, InvoiceUpdateHandlerComponent, NewWaybillHandlerComponent, InvoiceStatusUpdateHandlerComponent);\n});","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/web_socket/web-socket.js"],"names":["React","useEffect","useState","useToast","connect","Stomp","useActionToast","useNewInvoiceMessageHandler","usePointPassMessageHandler","useNewWaybillMessageHandler","useInvoiceUpdateMessageHandler","useInvoiceStatusUpdateMessageHandler","INVOICE_STATUS_UPDATE_MESSAGE_TYPE","INVOICE_UPDATE_MESSAGE_TYPE","NEW_INVOICE_MESSAGE_TYPE","NEW_WAYBILL_MESSAGE_TYPE","POINT_PASS_MESSAGE_TYPE","WEB_SOCKET_CONNECT_URL","mapStateToProps","store","userId","user","id","role","roles","UNKNOWN_ROLE","WebSocket","props","currentStompClient","setCurrentStompClient","NotificationToastComponent","openNotificationToast","ActionToastComponent","openActionToast","NewWaybillHandlerComponent","handleNewWaybillMessage","NewInvoiceHandlerComponent","handleNewInvoiceMessage","PointPassHandlerComponent","handlePointPassMessage","InvoiceUpdateHandlerComponent","handleInvoiceUpdateMessage","InvoiceStatusUpdateHandlerComponent","handleInvoiceStatusUpdateMessage","subscribeToPrivateUrl","stompClient","privateUrl","subscribe","onMessageReceive","onSocketConnect","onSocketError","connectToServer","SockJs","require","over","msg","messageData","JSON","parse","body","notificationType","zIndex"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport useToast from \"../components/parts/toast-notification/useToast\";\r\nimport {connect} from \"react-redux\";\r\nimport * as Stomp from \"stompjs\"\r\nimport useActionToast from \"./hooks/action-toast/use-action-toast\";\r\nimport useNewInvoiceMessageHandler from \"./hooks/handlers/use-new-invoice-message-handler\";\r\nimport usePointPassMessageHandler from \"./hooks/handlers/use-point-pass-message-handler\";\r\nimport useNewWaybillMessageHandler from \"./hooks/handlers/use-new-waybill-message-handler\";\r\nimport useInvoiceUpdateMessageHandler from \"./hooks/handlers/use-invoice-update-message-handler\";\r\nimport useInvoiceStatusUpdateMessageHandler from \"./hooks/handlers/use-invoice-status-update-message-handler\";\r\nimport {\r\n    INVOICE_STATUS_UPDATE_MESSAGE_TYPE,\r\n    INVOICE_UPDATE_MESSAGE_TYPE,\r\n    NEW_INVOICE_MESSAGE_TYPE,\r\n    NEW_WAYBILL_MESSAGE_TYPE,\r\n    POINT_PASS_MESSAGE_TYPE\r\n} from \"./notification-types\";\r\nimport {WEB_SOCKET_CONNECT_URL} from \"../components/parts/util/request-util\";\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        userId: store.user.id,\r\n        role: store.user.roles[0]\r\n    }\r\n};\r\n\r\nconst UNKNOWN_ROLE = 'UNKNOWN';\r\n\r\nexport const WebSocket = connect(mapStateToProps)((props) => {\r\n    const [currentStompClient, setCurrentStompClient] = useState(null);\r\n    const [NotificationToastComponent, openNotificationToast] = useToast();\r\n    const [ActionToastComponent, openActionToast] = useActionToast()\r\n\r\n    const [NewWaybillHandlerComponent, handleNewWaybillMessage] = useNewWaybillMessageHandler();\r\n    const [NewInvoiceHandlerComponent, handleNewInvoiceMessage] = useNewInvoiceMessageHandler();\r\n    const [PointPassHandlerComponent, handlePointPassMessage] = usePointPassMessageHandler()\r\n    const [InvoiceUpdateHandlerComponent, handleInvoiceUpdateMessage] = useInvoiceUpdateMessageHandler()\r\n    const [InvoiceStatusUpdateHandlerComponent, handleInvoiceStatusUpdateMessage] = useInvoiceStatusUpdateMessageHandler();\r\n\r\n    const subscribeToPrivateUrl = (stompClient) => {\r\n        const privateUrl = `/user/${props.userId}/queue/messages`\r\n        stompClient.subscribe(privateUrl, onMessageReceive)\r\n    }\r\n\r\n    const onSocketConnect = (stompClient) => {\r\n        setCurrentStompClient(stompClient);\r\n        subscribeToPrivateUrl(stompClient);\r\n    }\r\n\r\n    const onSocketError = () => {\r\n        setCurrentStompClient(null);\r\n        openNotificationToast(\"Cannot connect to server for real-time notifications\", \"warning\");\r\n    }\r\n\r\n    const connectToServer = () => {\r\n        let SockJs = require(\"sockjs-client\");\r\n        SockJs = new SockJs(WEB_SOCKET_CONNECT_URL);\r\n        // SockJs = new SockJs(\"http://localhost:8080/ws\");\r\n        return Stomp.over(SockJs);\r\n    }\r\n\r\n\r\n    const onMessageReceive = (msg) => {\r\n        const messageData = JSON.parse(msg.body);\r\n        switch (messageData.notificationType) {\r\n            case NEW_INVOICE_MESSAGE_TYPE:\r\n                handleNewInvoiceMessage(messageData, openActionToast);\r\n                break;\r\n            case NEW_WAYBILL_MESSAGE_TYPE:\r\n                handleNewWaybillMessage(messageData, openActionToast);\r\n                break;\r\n            case INVOICE_STATUS_UPDATE_MESSAGE_TYPE:\r\n                handleInvoiceStatusUpdateMessage(messageData, openActionToast, openNotificationToast)\r\n                break;\r\n            case INVOICE_UPDATE_MESSAGE_TYPE:\r\n                handleInvoiceUpdateMessage(messageData, openActionToast);\r\n                break;\r\n            case POINT_PASS_MESSAGE_TYPE:\r\n                handlePointPassMessage(messageData, openActionToast);\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.role !== UNKNOWN_ROLE) {\r\n            let stompClient = connectToServer();\r\n            stompClient.connect({}, () => onSocketConnect(stompClient), () => onSocketError());\r\n        }\r\n    }, [props.role])\r\n\r\n\r\n    return (\r\n        <div style={{zIndex: 999}}>\r\n            {ActionToastComponent}\r\n            {NotificationToastComponent}\r\n\r\n            {NewInvoiceHandlerComponent}\r\n            {PointPassHandlerComponent}\r\n            {InvoiceUpdateHandlerComponent}\r\n            {NewWaybillHandlerComponent}\r\n            {InvoiceStatusUpdateHandlerComponent}\r\n        </div>\r\n    )\r\n})"]},"metadata":{},"sourceType":"module"}