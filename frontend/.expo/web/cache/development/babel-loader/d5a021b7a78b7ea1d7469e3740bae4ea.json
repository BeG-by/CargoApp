{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\forms\\\\reset-password-form\\\\reset-password.js\";\nimport React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Form, Formik } from \"formik\";\nimport FormikField from \"../../parts/util/formik-field\";\nimport useToast from \"../../parts/toast-notification/useToast\";\nimport { withRouter } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { ResetPasswordScheme } from \"../../parts/validation/reset-password-validation\";\nimport { handleRequestError, makeRequest, REGISTRATION_URL, RESET_PASSWORD_URL } from \"../../parts/util/request-util\";\nexport function ChangePasswordForm(props) {\n  var _this = this;\n\n  var _useToast = useToast(),\n      _useToast2 = _slicedToArray(_useToast, 2),\n      toast = _useToast2[0],\n      showToast = _useToast2[1];\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      code = _useState2[0],\n      setCode = _useState2[1];\n\n  useEffect(function () {\n    var href = window.location.href;\n    var url = new URL(href);\n    var code = url.searchParams.get(\"code\");\n\n    if (code === null || code === undefined) {\n      props.history.push(\"/\");\n    }\n\n    setCode(code);\n  }, []);\n  return React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(\"div\", {\n    className: \"reset-password-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, React.createElement(Paper, {\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }, \"Reset password\"), React.createElement(Formik, {\n    enableReinitialize: true,\n    validationSchema: ResetPasswordScheme,\n    initialValues: {\n      password: \"\",\n      confirm: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      var passwordRequest = {\n        password: values.password,\n        confirm: values.confirm,\n        code: code\n      };\n\n      if (passwordRequest.password !== passwordRequest.confirm) {\n        showToast(\"Passwords don't match\", \"error\");\n      } else {\n        showToast(\"Email is sending...\", \"info\");\n        makeRequest(\"POST\", RESET_PASSWORD_URL, passwordRequest).then(function (res) {\n          showToast(res.data, \"success\");\n          setTimeout(function () {\n            return window.location.href = \"/\";\n          }, 2000);\n        }).catch(function (error) {\n          return handleRequestError(error, showToast);\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      className: \"password-form\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"password\",\n      label: \"Password\",\n      formikFieldName: \"password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"confirm\",\n      label: \"Confirm your password\",\n      formikFieldName: \"confirm\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 37\n      }\n    }), React.createElement(\"div\", {\n      className: \"btn-form-wrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: formProps.listener,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 41\n      }\n    }, \"Confirm\")));\n  }), toast)));\n}\nexport default withRouter(ChangePasswordForm);","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/forms/reset-password-form/reset-password.js"],"names":["React","useEffect","useState","Button","Form","Formik","FormikField","useToast","withRouter","Paper","ResetPasswordScheme","handleRequestError","makeRequest","REGISTRATION_URL","RESET_PASSWORD_URL","ChangePasswordForm","props","toast","showToast","code","setCode","href","window","location","url","URL","searchParams","get","undefined","history","push","password","confirm","values","passwordRequest","then","res","data","setTimeout","catch","error","formProps","listener"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,QAA3B;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAAQC,mBAAR;AACA,SAAQC,kBAAR,EAA4BC,WAA5B,EAAyCC,gBAAzC,EAA2DC,kBAA3D;AAGA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA;;AAAA,kBAEXT,QAAQ,EAFG;AAAA;AAAA,MAE/BU,KAF+B;AAAA,MAExBC,SAFwB;;AAAA,kBAGdhB,QAAQ,CAAC,EAAD,CAHM;AAAA;AAAA,MAG/BiB,IAH+B;AAAA,MAGzBC,OAHyB;;AAKtCnB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIoB,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBF,IAA3B;AACA,QAAIG,GAAG,GAAG,IAAIC,GAAJ,CAAQJ,IAAR,CAAV;AACA,QAAIF,IAAI,GAAGK,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,MAArB,CAAX;;AAEA,QAAIR,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKS,SAA9B,EAAyC;AACrCZ,MAAAA,KAAK,CAACa,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH;;AAEDV,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEH,GAXQ,EAWN,EAXM,CAAT;AAaA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAII,oBAAC,MAAD;AACI,IAAA,kBAAkB,MADtB;AAEI,IAAA,gBAAgB,EAAET,mBAFtB;AAGI,IAAA,aAAa,EAAE;AACXqB,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAHnB;AAOI,IAAA,QAAQ,EAAE,kBAACC,MAAD,EAAY;AAElB,UAAMC,eAAe,GAAG;AACpBH,QAAAA,QAAQ,EAAEE,MAAM,CAACF,QADG;AAEpBC,QAAAA,OAAO,EAAEC,MAAM,CAACD,OAFI;AAGpBb,QAAAA,IAAI,EAAEA;AAHc,OAAxB;;AAMA,UAAIe,eAAe,CAACH,QAAhB,KAA6BG,eAAe,CAACF,OAAjD,EAA0D;AACtDd,QAAAA,SAAS,CAAC,uBAAD,EAA0B,OAA1B,CAAT;AACH,OAFD,MAEO;AACHA,QAAAA,SAAS,CAAC,qBAAD,EAAyB,MAAzB,CAAT;AACAN,QAAAA,WAAW,CAAC,MAAD,EAASE,kBAAT,EAA6BoB,eAA7B,CAAX,CACKC,IADL,CACU,UAAAC,GAAG,EAAI;AACTlB,UAAAA,SAAS,CAACkB,GAAG,CAACC,IAAL,EAAW,SAAX,CAAT;AACAC,UAAAA,UAAU,CAAC;AAAA,mBAAMhB,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAuB,GAA7B;AAAA,WAAD,EAAmC,IAAnC,CAAV;AACH,SAJL,EAKKkB,KALL,CAKW,UAAAC,KAAK;AAAA,iBAAI7B,kBAAkB,CAAC6B,KAAD,EAAQtB,SAAR,CAAtB;AAAA,SALhB;AAMH;AAEJ,KA3BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA6BK,UAACuB,SAAD,EAAe;AACZ,WACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AACI,MAAA,WAAW,EAAEA,SADjB;AAEI,MAAA,EAAE,EAAE,UAFR;AAGI,MAAA,KAAK,EAAE,UAHX;AAII,MAAA,eAAe,EAAE,UAJrB;AAKI,MAAA,IAAI,EAAC,UALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQI,oBAAC,WAAD;AACI,MAAA,WAAW,EAAEA,SADjB;AAEI,MAAA,EAAE,EAAE,SAFR;AAGI,MAAA,KAAK,EAAE,uBAHX;AAII,MAAA,eAAe,EAAE,SAJrB;AAKI,MAAA,IAAI,EAAC,UALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAeI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,IAAI,EAAC,QAHT;AAII,MAAA,QAAQ,EAAEA,SAAS,CAACC,QAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CAfJ,CADJ;AA4BH,GA1DL,CAJJ,EAgEKzB,KAhEL,CADJ,CADJ,CADJ;AAwEH;AAED,eAAeT,UAAU,CAACO,kBAAD,CAAzB","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Form, Formik} from \"formik\";\r\nimport FormikField from \"../../parts/util/formik-field\";\r\nimport useToast from \"../../parts/toast-notification/useToast\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {ResetPasswordScheme} from \"../../parts/validation/reset-password-validation\";\r\nimport {handleRequestError, makeRequest, REGISTRATION_URL, RESET_PASSWORD_URL} from \"../../parts/util/request-util\";\r\n\r\n\r\nexport function ChangePasswordForm(props) {\r\n\r\n    const [toast, showToast] = useToast();\r\n    const [code, setCode] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let href = window.location.href;\r\n        let url = new URL(href);\r\n        let code = url.searchParams.get(\"code\");\r\n\r\n        if (code === null || code === undefined) {\r\n            props.history.push(\"/\")\r\n        }\r\n\r\n        setCode(code)\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"reset-password-form\">\r\n                <Paper elevation={3}>\r\n                    <header>\r\n                        Reset password\r\n                    </header>\r\n                    <Formik\r\n                        enableReinitialize\r\n                        validationSchema={ResetPasswordScheme}\r\n                        initialValues={{\r\n                            password: \"\",\r\n                            confirm: \"\",\r\n                        }}\r\n                        onSubmit={(values) => {\r\n\r\n                            const passwordRequest = {\r\n                                password: values.password,\r\n                                confirm: values.confirm,\r\n                                code: code\r\n                            };\r\n\r\n                            if (passwordRequest.password !== passwordRequest.confirm) {\r\n                                showToast(\"Passwords don't match\", \"error\");\r\n                            } else {\r\n                                showToast(\"Email is sending...\" , \"info\")\r\n                                makeRequest(\"POST\", RESET_PASSWORD_URL, passwordRequest)\r\n                                    .then(res => {\r\n                                        showToast(res.data, \"success\");\r\n                                        setTimeout(() => window.location.href = \"/\", 2000)\r\n                                    })\r\n                                    .catch(error => handleRequestError(error, showToast))\r\n                            }\r\n\r\n                        }}\r\n                    >\r\n                        {(formProps) => {\r\n                            return (\r\n                                <Form className=\"password-form\">\r\n                                    <FormikField\r\n                                        formikProps={formProps}\r\n                                        id={\"password\"}\r\n                                        label={\"Password\"}\r\n                                        formikFieldName={\"password\"}\r\n                                        type=\"password\"\r\n                                    />\r\n                                    <FormikField\r\n                                        formikProps={formProps}\r\n                                        id={\"confirm\"}\r\n                                        label={\"Confirm your password\"}\r\n                                        formikFieldName={\"confirm\"}\r\n                                        type=\"password\"\r\n                                    />\r\n                                    <div className=\"btn-form-wrapper\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={formProps.listener}\r\n                                        >\r\n                                            Confirm\r\n                                        </Button>\r\n                                    </div>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                    {toast}\r\n                </Paper>\r\n            </div>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default withRouter(ChangePasswordForm);"]},"metadata":{},"sourceType":"module"}