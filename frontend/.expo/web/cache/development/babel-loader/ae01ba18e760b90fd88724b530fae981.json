{"ast":null,"code":"import * as Yup from 'yup';\nimport moment from \"moment\";\nexport var AutoScheme = Yup.object({\n  mark: Yup.string().required(\"Mark is required\").min(2, \"Min length must be greater than 2 symbols\").max(42, \"Max length must be lesser than 42 symbols\").matches(/^[0-9A-Za-z\\-]+$/, \"Mark must contain symbols A-Z, a-z, 0-9, (-)\"),\n  number: Yup.string().required(\"Number is required\").min(2, \"Min length must be greater than 2 symbols\").max(24, \"Max length must be lesser than 24 symbols\").matches(/^[0-9A-Za-z\\-]+$/, \"Number must contain symbols A-Z, a-z, 0-9, (-)\"),\n  autoType: Yup.string().required(\"Auto type is required\"),\n  consumption: Yup.string().required(\"Consumption is required\").max(9, \"Max length must be lesser than 9 symbols\").matches(/^[0-9]+(\\.[0-9]+)?$/, \"Consumption must be number\"),\n  maxLoad: Yup.string().required(\"Max load is required\").matches(/^[0-9]+$/, \"Max load must be contain only digit\"),\n  dateOfIssue: Yup.string().test('test.js', 'Date must be equal or before than today', function (value) {\n    var date = new Date();\n    var initDate = date.toISOString().substring(0, date.toISOString().indexOf(\"T\"));\n    return moment(value, \"yyyy-MM-DD\").isSameOrBefore(moment(initDate, \"yyyy-MM-DD\"));\n  })\n});","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/parts/validation/auto-validation.js"],"names":["Yup","moment","AutoScheme","object","mark","string","required","min","max","matches","number","autoType","consumption","maxLoad","dateOfIssue","test","value","date","Date","initDate","toISOString","substring","indexOf","isSameOrBefore"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,UAAU,GAAGF,GAAG,CAACG,MAAJ,CAAW;AACjCC,EAAAA,IAAI,EAAEJ,GAAG,CAACK,MAAJ,GACDC,QADC,CACQ,kBADR,EAEDC,GAFC,CAEG,CAFH,EAEM,2CAFN,EAGDC,GAHC,CAGG,EAHH,EAGO,2CAHP,EAIDC,OAJC,CAIO,kBAJP,EAI2B,8CAJ3B,CAD2B;AAMjCC,EAAAA,MAAM,EAAEV,GAAG,CAACK,MAAJ,GACHC,QADG,CACM,oBADN,EAEHC,GAFG,CAEC,CAFD,EAEI,2CAFJ,EAGHC,GAHG,CAGC,EAHD,EAGK,2CAHL,EAIHC,OAJG,CAIK,kBAJL,EAIyB,gDAJzB,CANyB;AAWjCE,EAAAA,QAAQ,EAAEX,GAAG,CAACK,MAAJ,GACLC,QADK,CACI,uBADJ,CAXuB;AAajCM,EAAAA,WAAW,EAAEZ,GAAG,CAACK,MAAJ,GACRC,QADQ,CACC,yBADD,EAERE,GAFQ,CAEJ,CAFI,EAED,0CAFC,EAGRC,OAHQ,CAGA,qBAHA,EAGuB,4BAHvB,CAboB;AAiBjCI,EAAAA,OAAO,EAAEb,GAAG,CAACK,MAAJ,GACJC,QADI,CACK,sBADL,EAEJG,OAFI,CAEI,UAFJ,EAEgB,qCAFhB,CAjBwB;AAoBjCK,EAAAA,WAAW,EAAEd,GAAG,CAACK,MAAJ,GACRU,IADQ,CAEL,SAFK,EAGL,yCAHK,EAIL,UAAUC,KAAV,EAAiB;AACb,QAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACA,QAAIC,QAAQ,GAAGF,IAAI,CAACG,WAAL,GAAmBC,SAAnB,CAA6B,CAA7B,EAAgCJ,IAAI,CAACG,WAAL,GAAmBE,OAAnB,CAA2B,GAA3B,CAAhC,CAAf;AACA,WAAOrB,MAAM,CAACe,KAAD,EAAQ,YAAR,CAAN,CAA4BO,cAA5B,CAA2CtB,MAAM,CAACkB,QAAD,EAAW,YAAX,CAAjD,CAAP;AACH,GARI;AApBoB,CAAX,CAAnB","sourcesContent":["import * as Yup from 'yup';\r\nimport moment from \"moment\";\r\n\r\nexport const AutoScheme = Yup.object({\r\n    mark: Yup.string()\r\n        .required(\"Mark is required\")\r\n        .min(2, \"Min length must be greater than 2 symbols\")\r\n        .max(42, \"Max length must be lesser than 42 symbols\")\r\n        .matches(/^[0-9A-Za-z\\-]+$/, \"Mark must contain symbols A-Z, a-z, 0-9, (-)\"),\r\n    number: Yup.string()\r\n        .required(\"Number is required\")\r\n        .min(2, \"Min length must be greater than 2 symbols\")\r\n        .max(24, \"Max length must be lesser than 24 symbols\")\r\n        .matches(/^[0-9A-Za-z\\-]+$/, \"Number must contain symbols A-Z, a-z, 0-9, (-)\"),\r\n    autoType: Yup.string()\r\n        .required(\"Auto type is required\"),\r\n    consumption: Yup.string()\r\n        .required(\"Consumption is required\")\r\n        .max(9, \"Max length must be lesser than 9 symbols\")\r\n        .matches(/^[0-9]+(\\.[0-9]+)?$/, \"Consumption must be number\"),\r\n    maxLoad: Yup.string()\r\n        .required(\"Max load is required\")\r\n        .matches(/^[0-9]+$/, \"Max load must be contain only digit\"),\r\n    dateOfIssue: Yup.string()\r\n        .test(\r\n            'test.js',\r\n            'Date must be equal or before than today',\r\n            function (value) {\r\n                let date = new Date();\r\n                let initDate = date.toISOString().substring(0, date.toISOString().indexOf(\"T\"));\r\n                return moment(value, \"yyyy-MM-DD\").isSameOrBefore(moment(initDate, \"yyyy-MM-DD\"));\r\n            }\r\n        )\r\n});"]},"metadata":{},"sourceType":"module"}