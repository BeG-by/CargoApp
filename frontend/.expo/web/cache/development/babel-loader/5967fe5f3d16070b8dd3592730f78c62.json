{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\map\\\\manager-map-for-points-view.js\";\nimport React, { useState } from \"react\";\nimport { InfoWindow } from \"@react-google-maps/api\";\nimport AbstractMap from \"./abstract-map\";\nimport { dateToString } from \"./utils\";\nvar NOT_MATTER_NUMBER = -1;\nexport default function ManagerMapForPointsView(props) {\n  var markers = props.markers;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedMarker = _useState2[0],\n      setSelectedMarker = _useState2[1];\n\n  var _useState3 = useState(NOT_MATTER_NUMBER),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedMarkerIndex = _useState4[0],\n      setSelectedMarkerIndex = _useState4[1];\n\n  var handleMarkerClick = function handleMarkerClick(marker, markerIndex) {\n    setSelectedMarker(marker);\n    setSelectedMarkerIndex(markerIndex + 1);\n  };\n\n  var InfoWindowComponent = selectedMarker === null ? null : React.createElement(InfoWindow, {\n    position: {\n      lat: selectedMarker.lat,\n      lng: selectedMarker.lng\n    },\n    onCloseClick: function onCloseClick() {\n      return setSelectedMarker(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, selectedMarker.isPassed ? React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 25\n    }\n  }, \"[\" + selectedMarkerIndex + \"] Point\"), React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, dateToString(selectedMarker.passageDate))) : React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 25\n    }\n  }, \"[\" + selectedMarkerIndex + \"] Point\"), React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 25\n    }\n  }, \"Not passed\")));\n  return React.createElement(AbstractMap, {\n    markers: markers,\n    onMapClick: function onMapClick() {\n      return setSelectedMarker(null);\n    },\n    onMarkerClick: handleMarkerClick,\n    infoWindowComponent: InfoWindowComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/map/manager-map-for-points-view.js"],"names":["React","useState","InfoWindow","AbstractMap","dateToString","NOT_MATTER_NUMBER","ManagerMapForPointsView","props","markers","selectedMarker","setSelectedMarker","selectedMarkerIndex","setSelectedMarkerIndex","handleMarkerClick","marker","markerIndex","InfoWindowComponent","lat","lng","isPassed","passageDate"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,OAAOC,WAAP;AACA,SAAQC,YAAR;AAEA,IAAMC,iBAAiB,GAAG,CAAC,CAA3B;AAEA,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AACnD,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB;;AADmD,kBAGPP,QAAQ,CAAC,IAAD,CAHD;AAAA;AAAA,MAG5CQ,cAH4C;AAAA,MAG5BC,iBAH4B;;AAAA,mBAIGT,QAAQ,CAACI,iBAAD,CAJX;AAAA;AAAA,MAI5CM,mBAJ4C;AAAA,MAIvBC,sBAJuB;;AAMnD,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAASC,WAAT,EAAyB;AAC/CL,IAAAA,iBAAiB,CAACI,MAAD,CAAjB;AACAF,IAAAA,sBAAsB,CAACG,WAAW,GAAG,CAAf,CAAtB;AACH,GAHD;;AAKA,MAAMC,mBAAmB,GACrBP,cAAc,KAAK,IAAnB,GAA0B,IAA1B,GACI,oBAAC,UAAD;AACI,IAAA,QAAQ,EAAE;AAACQ,MAAAA,GAAG,EAAER,cAAc,CAACQ,GAArB;AAA0BC,MAAAA,GAAG,EAAET,cAAc,CAACS;AAA9C,KADd;AAEI,IAAA,YAAY,EAAE;AAAA,aAAMR,iBAAiB,CAAC,IAAD,CAAvB;AAAA,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKD,cAAc,CAACU,QAAf,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAASR,mBAAT,aADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,YAAY,CAACK,cAAc,CAACW,WAAhB,CAAjB,CAFJ,CADH,GAMG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAST,mBAAT,aADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,YAAL,CAFJ,CAVR,CAFR;AAoBA,SACI,oBAAC,WAAD;AACI,IAAA,OAAO,EAAEH,OADb;AAEI,IAAA,UAAU,EAAE;AAAA,aAAME,iBAAiB,CAAC,IAAD,CAAvB;AAAA,KAFhB;AAGI,IAAA,aAAa,EAAEG,iBAHnB;AAII,IAAA,mBAAmB,EAAEG,mBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH","sourcesContent":["import React, {useState} from \"react\";\r\nimport {InfoWindow} from \"@react-google-maps/api\";\r\nimport AbstractMap from \"./abstract-map\";\r\nimport {dateToString} from \"./utils\";\r\n\r\nconst NOT_MATTER_NUMBER = -1;\r\n\r\nexport default function ManagerMapForPointsView(props) {\r\n    const markers = props.markers;\r\n\r\n    const [selectedMarker, setSelectedMarker] = useState(null);\r\n    const [selectedMarkerIndex, setSelectedMarkerIndex] = useState(NOT_MATTER_NUMBER);\r\n\r\n    const handleMarkerClick = (marker, markerIndex) => {\r\n        setSelectedMarker(marker);\r\n        setSelectedMarkerIndex(markerIndex + 1);\r\n    }\r\n\r\n    const InfoWindowComponent = (\r\n        selectedMarker === null ? null :\r\n            <InfoWindow\r\n                position={{lat: selectedMarker.lat, lng: selectedMarker.lng}}\r\n                onCloseClick={() => setSelectedMarker(null)}\r\n            >\r\n                {selectedMarker.isPassed ?\r\n                    <div>\r\n                        <h2>{`[${selectedMarkerIndex}] Point`}</h2>\r\n                        <h3>{dateToString(selectedMarker.passageDate)}</h3>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <h2>{`[${selectedMarkerIndex}] Point`}</h2>\r\n                        <h3>{\"Not passed\"}</h3>\r\n                    </div>\r\n                }\r\n            </InfoWindow>);\r\n\r\n\r\n    return (\r\n        <AbstractMap\r\n            markers={markers}\r\n            onMapClick={() => setSelectedMarker(null)}\r\n            onMarkerClick={handleMarkerClick}\r\n            infoWindowComponent={InfoWindowComponent}\r\n        />)\r\n}"]},"metadata":{},"sourceType":"module"}