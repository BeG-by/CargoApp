{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function dateToString(date) {\n  if (date === null) {\n    return null;\n  }\n\n  var hoursStr = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n  var minStr = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n  return hoursStr + \":\" + minStr + \" \" + date.toISOString().slice(0, 10) + \" \";\n}\nexport function convertPointsToBackendApi(points) {\n  var pointsWithCorrectApi = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(points), _step; !(_step = _iterator()).done;) {\n    var point = _step.value;\n    pointsWithCorrectApi.push({\n      latitude: point.lat,\n      longitude: point.lng\n    });\n  }\n\n  return pointsWithCorrectApi;\n}\nexport function pointsComparator(p1, p2) {\n  if (p1.index > p2.index) {\n    return 1;\n  }\n\n  if (p1.index < p2.index) {\n    return -1;\n  }\n\n  return 0;\n}\nexport function convertPointsFromBackendApi(pointsFromBackend) {\n  var pointsWithCorrectApi = [];\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(pointsFromBackend), _step2; !(_step2 = _iterator2()).done;) {\n    var point = _step2.value;\n    pointsWithCorrectApi.push({\n      index: point.id,\n      isPassed: point.passed,\n      passageDate: point.passageDate === null ? null : new Date(point.passageDate),\n      lat: parseFloat(point.latitude),\n      lng: parseFloat(point.longitude)\n    });\n  }\n\n  pointsWithCorrectApi.sort(pointsComparator);\n  return pointsWithCorrectApi;\n}\nexport function countDistanceBetweenMarkers(markers) {\n  var distance = 0;\n\n  for (var i = 0; i < markers.length - 1; i++) {\n    distance += countDistanceBetweenTwoMarkers(markers[i], markers[i + 1]);\n  }\n\n  return distance;\n}\nexport function countDistanceBetweenTwoMarkers(mk1, mk2) {\n  var R = 6371009;\n  var rlat1 = mk1.lat * (Math.PI / 180);\n  var rlat2 = mk2.lat * (Math.PI / 180);\n  var difflat = rlat2 - rlat1;\n  var difflon = (mk2.lng - mk1.lng) * (Math.PI / 180);\n  var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\n  return d;\n}","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/map/utils.js"],"names":["dateToString","date","hoursStr","getHours","minStr","getMinutes","toISOString","slice","convertPointsToBackendApi","points","pointsWithCorrectApi","point","push","latitude","lat","longitude","lng","pointsComparator","p1","p2","index","convertPointsFromBackendApi","pointsFromBackend","id","isPassed","passed","passageDate","Date","parseFloat","sort","countDistanceBetweenMarkers","markers","distance","i","length","countDistanceBetweenTwoMarkers","mk1","mk2","R","rlat1","Math","PI","rlat2","difflat","difflon","d","asin","sqrt","sin","cos"],"mappings":"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","sourcesContent":["export function dateToString(date) {\r\n    if (date === null) {\r\n        return null;\r\n    }\r\n    let hoursStr = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\r\n    let minStr = date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\r\n\r\n    return `${hoursStr}:${minStr} ${date.toISOString().slice(0, 10)} `\r\n}\r\n\r\nexport function convertPointsToBackendApi(points) {\r\n    let pointsWithCorrectApi = [];\r\n    for (let point of points) {\r\n        pointsWithCorrectApi.push({\r\n            latitude: point.lat,\r\n            longitude: point.lng,\r\n        })\r\n    }\r\n    return pointsWithCorrectApi;\r\n}\r\n\r\nexport function pointsComparator(p1, p2) {\r\n    if (p1.index > p2.index) {\r\n        return 1;\r\n    }\r\n    if (p1.index < p2.index) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\nexport function convertPointsFromBackendApi(pointsFromBackend) {\r\n    let pointsWithCorrectApi = [];\r\n    for (let point of pointsFromBackend) {\r\n        pointsWithCorrectApi.push({\r\n            index: point.id,\r\n            isPassed: point.passed,\r\n            passageDate: point.passageDate === null ? null : new Date(point.passageDate),\r\n            lat: parseFloat(point.latitude),\r\n            lng: parseFloat(point.longitude),\r\n        })\r\n    }\r\n    pointsWithCorrectApi.sort(pointsComparator);\r\n    return pointsWithCorrectApi;\r\n}\r\n\r\nexport function countDistanceBetweenMarkers(markers) {\r\n    let distance = 0;\r\n    for (let i = 0; i < markers.length - 1; i++) {\r\n        distance += countDistanceBetweenTwoMarkers(markers[i], markers[i + 1]);\r\n    }\r\n    return distance;\r\n}\r\n\r\nexport function countDistanceBetweenTwoMarkers(mk1, mk2) {\r\n    let R = 6371009; // Radius of the Earth in meters\r\n    let rlat1 = mk1.lat * (Math.PI / 180); // Convert degrees to radians\r\n    let rlat2 = mk2.lat * (Math.PI / 180); // Convert degrees to radians\r\n    let difflat = rlat2 - rlat1; // Radian difference (latitudes)\r\n    let difflon = (mk2.lng - mk1.lng) * (Math.PI / 180); // Radian difference (longitudes)\r\n\r\n    let d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat / 2) * Math.sin(difflat / 2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.sin(difflon / 2) * Math.sin(difflon / 2)));\r\n    return d;\r\n}"]},"metadata":{},"sourceType":"module"}