{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\roles\\\\admin\\\\users\\\\mail-dialog.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport \"./mail.css\";\nimport * as Yup from \"yup\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { UserTemplateSelector } from \"./user-selectors\";\nimport { EMAIL_URL, handleRequestError, makeRequest, TEMPLATES_URL } from \"../../../parts/util/request-util\";\nvar ValidationMessage = Yup.object({\n  message: Yup.string().required(\"Text is required\").max(2500, \"Max length must be lesser than 2500 symbols\")\n});\nvar ValidationSubject = Yup.object({\n  subject: Yup.string().required(\"Subject is required\").max(64, \"Max length must be lesser than 64 symbols\")\n});\nexport var MailDialog = function MailDialog(props) {\n  var open = props.open,\n      onClose = props.onClose,\n      showToast = props.showToast,\n      emails = props.emails;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      templateContent = _useState2[0],\n      setTemplateContent = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedTemplate = _useState4[0],\n      setSelectedTemplate = _useState4[1];\n\n  useEffect(function () {\n    makeRequest(\"GET\", TEMPLATES_URL).then(function (res) {\n      return setTemplateContent(res.data);\n    }).catch(function (error) {\n      return handleRequestError(error, showToast);\n    });\n  }, []);\n\n  var handleClose = function handleClose() {\n    setSelectedTemplate(\"\");\n    onClose();\n  };\n\n  return React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, React.createElement(\"span\", {\n    id: \"form-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Email\"), React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    onClick: handleClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, React.createElement(CloseIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }))), React.createElement(DialogContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    validationSchema: selectedTemplate === \"\" ? ValidationSubject.concat(ValidationMessage) : ValidationSubject,\n    initialValues: {\n      message: \"\",\n      subject: \"\",\n      template: \"\"\n    },\n    onSubmit: function onSubmit(values) {\n      var data = {\n        emails: Array.from(emails),\n        subject: values.subject\n      };\n\n      if (selectedTemplate === \"\") {\n        data.text = values.message;\n        showToast(\"Email is sending...\", \"info\");\n        makeRequest(\"POST\", EMAIL_URL, data).then(function (res) {\n          showToast(\"Emails have been successfully sent\");\n          handleClose();\n        }).catch(function (error) {\n          return handleRequestError(error, showToast);\n        });\n      } else {\n        data.type = values.template;\n        showToast(\"Email is sending...\", \"info\");\n        makeRequest(\"POST\", EMAIL_URL + \"/template\", data).then(function (res) {\n          showToast(\"Emails have been successfully sent\");\n          handleClose();\n        }).catch(function (error) {\n          return handleRequestError(error, showToast);\n        });\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      style: {\n        width: 550\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 33\n      }\n    }, React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 37\n      }\n    }, React.createElement(TextField, {\n      id: \"subject\",\n      label: \"Subject\",\n      margin: \"dense\",\n      name: \"subject\",\n      onChange: formProps.handleChange,\n      onBlur: formProps.handleBlur,\n      value: formProps.values[\"subject\"],\n      style: {\n        width: 200,\n        marginBottom: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    })), React.createElement(\"div\", {\n      style: {\n        marginTop: 0,\n        marginBottom: 5\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 37\n      }\n    }, React.createElement(\"label\", {\n      className: \"error-message\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 41\n      }\n    }, React.createElement(ErrorMessage, {\n      name: \"subject\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 45\n      }\n    }))), React.createElement(\"div\", {\n      style: {\n        marginTop: 0,\n        marginBottom: 5\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 37\n      }\n    }, React.createElement(UserTemplateSelector, {\n      formikProps: formProps,\n      id: \"template\",\n      label: \"Template\",\n      formikFieldName: \"template\",\n      onSelect: setSelectedTemplate,\n      templates: templateContent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 41\n      }\n    })), React.createElement(\"div\", {\n      style: {\n        textAlign: \"left\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 37\n      }\n    }, selectedTemplate === \"\" ? React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 45\n      }\n    }, React.createElement(Field, {\n      as: \"textarea\",\n      id: \"message\",\n      name: \"message\",\n      onChange: formProps.handleChange,\n      onBlur: formProps.handleBlur,\n      value: formProps.values[\"message\"],\n      maxlength: 2501,\n      className: \"mail-text\",\n      placeHolder: \"You can write message here...\",\n      fullWidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 49\n      }\n    }), React.createElement(\"label\", {\n      className: \"error-message\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 49\n      }\n    }, React.createElement(ErrorMessage, {\n      name: \"message\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 53\n      }\n    }))) : React.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: selectedTemplate\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 47\n      }\n    })), React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginTop: 10,\n        marginBottom: 5\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 37\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: formProps.listener,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 41\n      }\n    }, \"Send\")));\n  }))));\n};","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/roles/admin/users/mail-dialog.js"],"names":["React","useEffect","useState","Button","Dialog","DialogContent","DialogTitle","ErrorMessage","Field","Form","Formik","IconButton","CloseIcon","Yup","TextField","UserTemplateSelector","EMAIL_URL","handleRequestError","makeRequest","TEMPLATES_URL","ValidationMessage","object","message","string","required","max","ValidationSubject","subject","MailDialog","props","open","onClose","showToast","emails","templateContent","setTemplateContent","selectedTemplate","setSelectedTemplate","then","res","data","catch","error","handleClose","concat","template","values","Array","from","text","type","formProps","width","handleChange","handleBlur","marginBottom","marginTop","textAlign","__html","listener"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport \"./mail.css\";\r\nimport * as Yup from \"yup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {UserTemplateSelector} from \"./user-selectors\";\r\nimport {EMAIL_URL, handleRequestError, makeRequest, TEMPLATES_URL} from \"../../../parts/util/request-util\";\r\n\r\n\r\nconst ValidationMessage = Yup.object({\r\n    message: Yup.string()\r\n        .required(\"Text is required\")\r\n        .max(2500, \"Max length must be lesser than 2500 symbols\")\r\n});\r\n\r\nconst ValidationSubject = Yup.object({\r\n    subject: Yup.string()\r\n        .required(\"Subject is required\")\r\n        .max(64, \"Max length must be lesser than 64 symbols\")\r\n});\r\n\r\n\r\nexport const MailDialog = (props) => {\r\n    const {open, onClose, showToast, emails} = props;\r\n    const [templateContent, setTemplateContent] = useState({});\r\n    const [selectedTemplate, setSelectedTemplate] = useState(\"\");\r\n\r\n\r\n    useEffect(() => {\r\n        makeRequest(\"GET\", TEMPLATES_URL)\r\n            .then(res => setTemplateContent(res.data))\r\n            .catch(error => handleRequestError(error, showToast))\r\n\r\n    }, []);\r\n\r\n\r\n    const handleClose = () => {\r\n        setSelectedTemplate(\"\");\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    <span id=\"form-title\">Email</span>\r\n                    <IconButton aria-label=\"close\"\r\n                                onClick={handleClose}\r\n                    >\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Formik\r\n                        enableReinitialize\r\n                        validationSchema={selectedTemplate === \"\" ?\r\n                            ValidationSubject.concat(ValidationMessage) :\r\n                            ValidationSubject}\r\n                        initialValues={{\r\n                            message: \"\",\r\n                            subject: \"\",\r\n                            template: \"\",\r\n                        }}\r\n                        onSubmit={(values) => {\r\n\r\n                            const data = {\r\n                                emails: Array.from(emails),\r\n                                subject: values.subject,\r\n                            };\r\n\r\n                            if (selectedTemplate === \"\") {\r\n                                data.text = values.message;\r\n                                showToast(\"Email is sending...\" , \"info\")\r\n                                makeRequest(\"POST\", EMAIL_URL, data)\r\n                                    .then(res => {\r\n                                        showToast(\"Emails have been successfully sent\");\r\n                                        handleClose()\r\n                                    })\r\n                                    .catch(error => handleRequestError(error, showToast))\r\n\r\n                            } else {\r\n                                data.type = values.template;\r\n                                showToast(\"Email is sending...\" , \"info\")\r\n                                makeRequest(\"POST\", EMAIL_URL + \"/template\", data)\r\n                                    .then(res => {\r\n                                        showToast(\"Emails have been successfully sent\");\r\n                                        handleClose()\r\n                                    })\r\n                                    .catch(error => handleRequestError(error, showToast))\r\n                            }\r\n\r\n                        }}\r\n                    >\r\n                        {(formProps) => {\r\n                            return (\r\n                                <Form style={{width: 550}}>\r\n                                    <div>\r\n                                        <TextField\r\n                                            id={\"subject\"}\r\n                                            label={\"Subject\"}\r\n                                            margin=\"dense\"\r\n                                            name=\"subject\"\r\n                                            onChange={formProps.handleChange}\r\n                                            onBlur={formProps.handleBlur}\r\n                                            value={formProps.values[\"subject\"]}\r\n                                            style={{width: 200, marginBottom: 10}}\r\n\r\n                                        />\r\n                                    </div>\r\n                                    <div style={{marginTop: 0, marginBottom: 5}}>\r\n                                        <label className=\"error-message\">\r\n                                            <ErrorMessage name=\"subject\"/>\r\n                                        </label>\r\n                                    </div>\r\n                                    <div style={{marginTop: 0, marginBottom: 5}}>\r\n                                        <UserTemplateSelector\r\n                                            formikProps={formProps}\r\n                                            id={\"template\"}\r\n                                            label={\"Template\"}\r\n                                            formikFieldName={\"template\"}\r\n                                            onSelect={setSelectedTemplate}\r\n                                            templates={templateContent}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div style={{textAlign: \"left\"}}>\r\n                                        {selectedTemplate === \"\" ?\r\n                                            <React.Fragment>\r\n                                                <Field as=\"textarea\"\r\n                                                       id=\"message\"\r\n                                                       name=\"message\"\r\n                                                       onChange={formProps.handleChange}\r\n                                                       onBlur={formProps.handleBlur}\r\n                                                       value={formProps.values[\"message\"]}\r\n                                                       maxlength={2501}\r\n                                                       className=\"mail-text\"\r\n                                                       placeHolder=\"You can write message here...\"\r\n                                                       fullWidth\r\n                                                />\r\n                                                < label className=\"error-message\">\r\n                                                    < ErrorMessage name=\"message\"/>\r\n                                                </label>\r\n                                            </React.Fragment>\r\n                                            : <div dangerouslySetInnerHTML={{__html: selectedTemplate}}/>\r\n                                        }\r\n                                    </div>\r\n\r\n                                    <div style={{textAlign: \"center\", marginTop: 10, marginBottom: 5}}>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={formProps.listener}\r\n                                        >\r\n                                            Send\r\n                                        </Button>\r\n                                    </div>\r\n                                </Form>\r\n                            );\r\n                        }}\r\n                    </Formik>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}