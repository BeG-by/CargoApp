{"ast":null,"code":"function priceProduct(price, quantity) {\n  return price * quantity;\n}\n\nfunction weightProduct(measure, mass) {\n  return measure === \"KG\" ? +mass : +mass * 1000;\n}\n\nexport var countTotalSum = function countTotalSum(products) {\n  return products.map(function (p) {\n    return priceProduct(p.price, p.quantity);\n  }).reduce(function (sum, p) {\n    return sum + p;\n  }, 0);\n};\nexport var countTotalLostSum = function countTotalLostSum(products) {\n  return products.map(function (p) {\n    return priceProduct(p.price, p.lostQuantity);\n  }).reduce(function (sum, p) {\n    return sum + p;\n  }, 0);\n};\nexport var countTotalWeight = function countTotalWeight(products) {\n  return products.map(function (p) {\n    return weightProduct(p.massMeasure, p.mass);\n  }).reduce(function (sum, p) {\n    return sum + p;\n  }, 0);\n};\nexport var countTotalQuantity = function countTotalQuantity(products) {\n  return products.map(function (p) {\n    return p.quantity;\n  }).reduce(function (sum, p) {\n    return sum + p;\n  }, 0);\n};\nexport var countTotalLostQuantity = function countTotalLostQuantity(products) {\n  return products.map(function (p) {\n    return p.lostQuantity;\n  }).reduce(function (sum, p) {\n    return sum + p;\n  }, 0);\n};","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/parts/util/cargo-total-info.js"],"names":["priceProduct","price","quantity","weightProduct","measure","mass","countTotalSum","products","map","p","reduce","sum","countTotalLostSum","lostQuantity","countTotalWeight","massMeasure","countTotalQuantity","countTotalLostQuantity"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACnC,SAAOD,KAAK,GAAGC,QAAf;AACH;;AAED,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsC;AAClC,SAAOD,OAAO,KAAK,IAAZ,GACD,CAACC,IADA,GAED,CAACA,IAAD,GAAQ,IAFd;AAGH;;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAc;AACvC,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACC,CAAD;AAAA,WAAOT,YAAY,CAACS,CAAC,CAACR,KAAH,EAAUQ,CAAC,CAACP,QAAZ,CAAnB;AAAA,GAAb,EAAuDQ,MAAvD,CAA8D,UAACC,GAAD,EAAMF,CAAN;AAAA,WAAYE,GAAG,GAAGF,CAAlB;AAAA,GAA9D,EAAmF,CAAnF,CAAP;AACH,CAFM;AAIP,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,QAAD,EAAc;AAC3C,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACC,CAAD;AAAA,WAAOT,YAAY,CAACS,CAAC,CAACR,KAAH,EAAUQ,CAAC,CAACI,YAAZ,CAAnB;AAAA,GAAb,EAA2DH,MAA3D,CAAkE,UAACC,GAAD,EAAMF,CAAN;AAAA,WAAYE,GAAG,GAAGF,CAAlB;AAAA,GAAlE,EAAuF,CAAvF,CAAP;AACH,CAFM;AAIP,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACP,QAAD,EAAc;AAC1C,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACC,CAAD;AAAA,WAAON,aAAa,CAACM,CAAC,CAACM,WAAH,EAAgBN,CAAC,CAACJ,IAAlB,CAApB;AAAA,GAAb,EAA0DK,MAA1D,CAAiE,UAACC,GAAD,EAAMF,CAAN;AAAA,WAAYE,GAAG,GAAGF,CAAlB;AAAA,GAAjE,EAAsF,CAAtF,CAAP;AACH,CAFM;AAIP,OAAO,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACT,QAAD,EAAc;AAC5C,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACP,QAAT;AAAA,GAAb,EAAgCQ,MAAhC,CAAuC,UAACC,GAAD,EAAMF,CAAN;AAAA,WAAYE,GAAG,GAAGF,CAAlB;AAAA,GAAvC,EAA4D,CAA5D,CAAP;AACH,CAFM;AAIP,OAAO,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACV,QAAD,EAAc;AAChD,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACI,YAAT;AAAA,GAAb,EAAoCH,MAApC,CAA2C,UAACC,GAAD,EAAMF,CAAN;AAAA,WAAYE,GAAG,GAAGF,CAAlB;AAAA,GAA3C,EAAgE,CAAhE,CAAP;AACH,CAFM","sourcesContent":["function priceProduct(price, quantity) {\r\n    return price * quantity;\r\n}\r\n\r\nfunction weightProduct(measure, mass) {\r\n    return measure === \"KG\"\r\n        ? +mass\r\n        : +mass * 1000;\r\n}\r\n\r\nexport const countTotalSum = (products) => {\r\n    return products.map((p) => priceProduct(p.price, p.quantity)).reduce((sum, p) => sum + p, 0);\r\n}\r\n\r\nexport const countTotalLostSum = (products) => {\r\n    return products.map((p) => priceProduct(p.price, p.lostQuantity)).reduce((sum, p) => sum + p, 0);\r\n}\r\n\r\nexport const countTotalWeight = (products) => {\r\n    return products.map((p) => weightProduct(p.massMeasure, p.mass)).reduce((sum, p) => sum + p, 0);\r\n}\r\n\r\nexport const countTotalQuantity = (products) => {\r\n    return products.map((p) => p.quantity).reduce((sum, p) => sum + p, 0);\r\n}\r\n\r\nexport const countTotalLostQuantity = (products) => {\r\n    return products.map((p) => p.lostQuantity).reduce((sum, p) => sum + p, 0);\r\n}"]},"metadata":{},"sourceType":"module"}