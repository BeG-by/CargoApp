{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\projects\\\\cargo_app\\\\frontend\\\\src\\\\components\\\\forms\\\\login-form\\\\login-form.js\";\n\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Form, Formik } from \"formik\";\nimport FormikField from \"../../parts/util/formik-field\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { changeUserAndCompany } from \"../../store/actions\";\nimport { withRouter } from \"react-router-dom\";\nimport { ValidationSchemaEmail, ValidationSchemaPassword } from \"../../parts/validation/login-form-validation\";\nimport \"../forms.css\";\nimport useToast from \"../../parts/toast-notification/useToast\";\nimport { handleRequestError, LOGIN_URL, makeRequest, OAUTH_GITHUB, OAUTH_LOGIN_URL, RESET_PASSWORD_MAIL_URL } from \"../../parts/util/request-util\";\nimport ArrowBackRoundedIcon from '@material-ui/icons/ArrowBackRounded';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GoogleLogin from \"react-google-login\";\nimport { GithubLoginButton, GoogleLoginButton } from \"react-social-login-buttons\";\nexport var LoginForm = function LoginForm(props) {\n  var open = props.open,\n      onClose = props.onClose,\n      history = props.history;\n\n  var _useToast = useToast(),\n      _useToast2 = _slicedToArray(_useToast, 2),\n      toast = _useToast2[0],\n      showToast = _useToast2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      resetOpen = _useState2[0],\n      setResetOpen = _useState2[1];\n\n  var CLIENT_ID = \"321725933906-8kmoujml8tgeesc5ugatmlce8ub9tedj.apps.googleusercontent.com\";\n\n  var onGoogleLogin = function onGoogleLogin(res) {\n    makeRequest(\"POST\", OAUTH_LOGIN_URL, {\n      accessToken: res.accessToken,\n      email: res.profileObj.email\n    }).then(function (res) {\n      localStorage.setItem(\"authorization\", res.data.token);\n      props.changeUserAndCompany(res.data.user, res.data.company);\n      history.push(\"/main\");\n    }).catch(function (error) {\n      return handleRequestError(error, showToast);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(Dialog, {\n    open: open,\n    onClose: onClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, React.createElement(\"span\", {\n    id: \"form-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, resetOpen ? \"Reset password\" : \"Sign in the Cargo system\"), React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    onClick: onClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, React.createElement(CloseIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }))), React.createElement(DialogContent, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, resetOpen ? React.createElement(ResetPasswordForm, {\n    showToast: showToast,\n    comeBack: setResetOpen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }) : React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: ValidationSchemaEmail.concat(ValidationSchemaPassword),\n    onSubmit: function onSubmit(values) {\n      makeRequest(\"POST\", LOGIN_URL, {\n        email: values.email,\n        password: values.password\n      }).then(function (res) {\n        localStorage.setItem(\"authorization\", res.data.token);\n        props.changeUserAndCompany(res.data.user, res.data.company);\n        history.push(\"/main\");\n      }).catch(function (error) {\n        var message = error.response.data;\n\n        if (error.response && error.response.status !== 500) {\n          if (message.startsWith(\"User not found\")) {\n            showToast(\"Email doesn't exist\");\n          } else {\n            showToast(error.response.data, \"error\");\n          }\n        } else {\n          showToast(\"Operation was failed. Cannot get response from server\", \"error\");\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      className: \"login-form\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 41\n      }\n    }, React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"email\",\n      label: \"Email\",\n      formikFieldName: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 45\n      }\n    }), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"password\",\n      label: \"Password\",\n      formikFieldName: \"password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 45\n      }\n    }), React.createElement(\"div\", {\n      className: \"reset-password\",\n      onClick: function onClick() {\n        return setResetOpen(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 45\n      }\n    }, \"Forgot your password ?\"), React.createElement(\"div\", {\n      className: \"buttons-login-div\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 45\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: formProps.listener,\n      style: {\n        fontSize: 18,\n        textTransform: \"none\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 49\n      }\n    }, \"Sign in\")));\n  }), React.createElement(\"div\", {\n    className: \"buttons-login-div\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }\n  }, React.createElement(GoogleLogin, {\n    clientId: CLIENT_ID,\n    render: function render(renderProps) {\n      return React.createElement(GoogleLoginButton, {\n        disabled: renderProps.disabled,\n        onClick: renderProps.onClick,\n        text: \"Sign in with Google\",\n        style: {\n          fontSize: 18\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 41\n        }\n      });\n    },\n    onSuccess: onGoogleLogin,\n    scope: \"email\",\n    cookiePolicy: 'single_host_origin',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 33\n    }\n  }), React.createElement(GithubLoginButton, {\n    onClick: function onClick() {\n      window.location.href = OAUTH_GITHUB;\n    },\n    text: \"Sign in with GitHub\",\n    style: {\n      fontSize: 18\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 33\n    }\n  })))), toast));\n};\nexport var ResetPasswordForm = function ResetPasswordForm(props) {\n  var showToast = props.showToast,\n      comeBack = props.comeBack;\n  return React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      email: \"\"\n    },\n    validationSchema: ValidationSchemaEmail,\n    onSubmit: function onSubmit(values) {\n      showToast(\"Email is sending...\", \"info\");\n      makeRequest(\"POST\", RESET_PASSWORD_MAIL_URL, {\n        email: values.email\n      }).then(function (res) {\n        return showToast(res.data);\n      }).catch(function (error) {\n        return handleRequestError(error, showToast);\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, function (formProps) {\n    return React.createElement(Form, {\n      className: \"login-form\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, React.createElement(\"div\", {\n      className: \"text-info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }, \"Please, enter your email and we will send you instructions on how to reset your password\"), React.createElement(FormikField, {\n      formikProps: formProps,\n      id: \"email\",\n      label: \"Email\",\n      formikFieldName: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }), React.createElement(\"div\", {\n      className: \"login-confirm-div margin-bottom\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      disabled: formProps.listener,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 29\n      }\n    }, \"CONFIRM\"), React.createElement(\"div\", {\n      className: \"back-arrow\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 29\n      }\n    }, React.createElement(Tooltip, {\n      title: \"Back to sign in\",\n      arrow: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 33\n      }\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      onClick: function onClick() {\n        return comeBack(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 37\n      }\n    }, React.createElement(ArrowBackRoundedIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 41\n      }\n    }))))));\n  });\n};\n\nvar mapActionsToProps = function mapActionsToProps(dispatch) {\n  return {\n    changeUserAndCompany: bindActionCreators(changeUserAndCompany, dispatch)\n  };\n};\n\nexport default withRouter(connect(null, mapActionsToProps)(LoginForm));","map":{"version":3,"sources":["D:/projects/cargo_app/frontend/src/components/forms/login-form/login-form.js"],"names":["React","useState","Button","Dialog","DialogContent","DialogTitle","Form","Formik","FormikField","IconButton","CloseIcon","connect","bindActionCreators","changeUserAndCompany","withRouter","ValidationSchemaEmail","ValidationSchemaPassword","useToast","handleRequestError","LOGIN_URL","makeRequest","OAUTH_GITHUB","OAUTH_LOGIN_URL","RESET_PASSWORD_MAIL_URL","ArrowBackRoundedIcon","Tooltip","GoogleLogin","GithubLoginButton","GoogleLoginButton","LoginForm","props","open","onClose","history","toast","showToast","resetOpen","setResetOpen","CLIENT_ID","onGoogleLogin","res","accessToken","email","profileObj","then","localStorage","setItem","data","token","user","company","push","catch","error","password","concat","values","message","response","status","startsWith","formProps","listener","fontSize","textTransform","renderProps","disabled","onClick","window","location","href","ResetPasswordForm","comeBack","mapActionsToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {Form, Formik} from \"formik\";\r\nimport FormikField from \"../../parts/util/formik-field\"\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {changeUserAndCompany} from \"../../store/actions\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {ValidationSchemaEmail, ValidationSchemaPassword} from \"../../parts/validation/login-form-validation\";\r\nimport '../forms.css';\r\nimport useToast from \"../../parts/toast-notification/useToast\";\r\nimport {\r\n    handleRequestError,\r\n    LOGIN_URL,\r\n    makeRequest, OAUTH_GITHUB,\r\n    OAUTH_LOGIN_URL,\r\n    RESET_PASSWORD_MAIL_URL\r\n} from \"../../parts/util/request-util\";\r\nimport ArrowBackRoundedIcon from '@material-ui/icons/ArrowBackRounded';\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport GoogleLogin from \"react-google-login\";\r\nimport {GithubLoginButton, GoogleLoginButton} from \"react-social-login-buttons\";\r\n\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n    const {open, onClose, history} = props;\r\n    const [toast, showToast] = useToast();\r\n    const [resetOpen, setResetOpen] = useState(false);\r\n\r\n    const CLIENT_ID = \"321725933906-8kmoujml8tgeesc5ugatmlce8ub9tedj.apps.googleusercontent.com\";\r\n\r\n\r\n    const onGoogleLogin = (res) => {\r\n\r\n        makeRequest(\"POST\", OAUTH_LOGIN_URL, {accessToken: res.accessToken, email: res.profileObj.email})\r\n            .then(res => {\r\n                    localStorage.setItem(\"authorization\", res.data.token);\r\n                    props.changeUserAndCompany(res.data.user, res.data.company);\r\n                    history.push(\"/main\");\r\n                }\r\n            ).catch(error => handleRequestError(error, showToast))\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={onClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    <span id=\"form-title\">{resetOpen ? \"Reset password\" : \"Sign in the Cargo system\"}</span>\r\n                    <IconButton aria-label=\"close\"\r\n                                onClick={onClose}\r\n                    >\r\n                        <CloseIcon/>\r\n                    </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {resetOpen ?\r\n                        <ResetPasswordForm\r\n                            showToast={showToast}\r\n                            comeBack={setResetOpen}\r\n                        /> :\r\n                        <div>\r\n                            <Formik\r\n                                enableReinitialize\r\n                                initialValues={{\r\n                                    email: \"\",\r\n                                    password: \"\",\r\n                                }}\r\n                                validationSchema={ValidationSchemaEmail.concat(ValidationSchemaPassword)}\r\n                                onSubmit={(values) => {\r\n\r\n                                    makeRequest(\"POST\", LOGIN_URL, {email: values.email, password: values.password})\r\n                                        .then(res => {\r\n                                            localStorage.setItem(\"authorization\", res.data.token);\r\n                                            props.changeUserAndCompany(res.data.user, res.data.company);\r\n                                            history.push(\"/main\");\r\n                                        })\r\n                                        .catch(error => {\r\n                                            let message = error.response.data;\r\n                                            if (error.response && error.response.status !== 500) {\r\n                                                if (message.startsWith(\"User not found\")) {\r\n                                                    showToast(\"Email doesn't exist\")\r\n                                                } else {\r\n                                                    showToast(error.response.data, \"error\");\r\n                                                }\r\n                                            } else {\r\n                                                showToast(\"Operation was failed. Cannot get response from server\", \"error\");\r\n                                            }\r\n                                        })\r\n\r\n                                }}\r\n                            >\r\n                                {(formProps) => {\r\n                                    return (\r\n                                        <Form className=\"login-form\">\r\n                                            <FormikField\r\n                                                formikProps={formProps}\r\n                                                id={\"email\"}\r\n                                                label={\"Email\"}\r\n                                                formikFieldName={\"email\"}\r\n                                            />\r\n                                            <FormikField\r\n                                                formikProps={formProps}\r\n                                                id={\"password\"}\r\n                                                label={\"Password\"}\r\n                                                formikFieldName={\"password\"}\r\n                                                type={\"password\"}\r\n                                            />\r\n                                            <div className=\"reset-password\" onClick={() => setResetOpen(true)}>\r\n                                                Forgot your password ?\r\n                                            </div>\r\n                                            <div className={\"buttons-login-div\"}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    type=\"submit\"\r\n                                                    disabled={formProps.listener}\r\n                                                    style={{fontSize: 18, textTransform: \"none\"}}\r\n                                                >\r\n                                                    Sign in\r\n                                                </Button>\r\n                                            </div>\r\n                                        </Form>\r\n                                    );\r\n                                }}\r\n                            </Formik>\r\n                            <div className={\"buttons-login-div\"}>\r\n                                <GoogleLogin\r\n                                    clientId={CLIENT_ID}\r\n                                    render={renderProps => (\r\n                                        <GoogleLoginButton\r\n                                            disabled={renderProps.disabled}\r\n                                            onClick={renderProps.onClick}\r\n                                            text={\"Sign in with Google\"}\r\n                                            style={{fontSize: 18}}\r\n                                        />\r\n                                    )}\r\n                                    onSuccess={onGoogleLogin}\r\n                                    scope={\"email\"}\r\n                                    cookiePolicy={'single_host_origin'}\r\n                                />\r\n\r\n                                <GithubLoginButton\r\n                                    onClick={() => {\r\n                                        window.location.href = OAUTH_GITHUB;\r\n                                    }}\r\n                                    text={\"Sign in with GitHub\"}\r\n                                    style={{fontSize: 18}}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    }\r\n                </DialogContent>\r\n                {toast}\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const ResetPasswordForm = (props) => {\r\n\r\n    const {showToast, comeBack} = props;\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{\r\n                email: \"\",\r\n            }}\r\n            validationSchema={ValidationSchemaEmail}\r\n            onSubmit={(values) => {\r\n                showToast(\"Email is sending...\", \"info\")\r\n                makeRequest(\"POST\", RESET_PASSWORD_MAIL_URL, {email: values.email})\r\n                    .then(res => showToast(res.data))\r\n                    .catch(error => handleRequestError(error, showToast))\r\n            }}\r\n        >\r\n            {(formProps) => {\r\n                return (\r\n                    <Form className=\"login-form\">\r\n                        <div className=\"text-info\">\r\n                            Please, enter your email and we will send you instructions on how to reset your password\r\n                        </div>\r\n                        <FormikField\r\n                            formikProps={formProps}\r\n                            id={\"email\"}\r\n                            label={\"Email\"}\r\n                            formikFieldName={\"email\"}\r\n                        />\r\n                        <div className=\"login-confirm-div margin-bottom\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                disabled={formProps.listener}\r\n                            >\r\n                                CONFIRM\r\n                            </Button>\r\n                            <div className=\"back-arrow\">\r\n                                <Tooltip title=\"Back to sign in\"\r\n                                         arrow>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        type=\"submit\"\r\n                                        onClick={() => comeBack(false)}\r\n                                    >\r\n                                        <ArrowBackRoundedIcon/>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                );\r\n            }}\r\n        </Formik>\r\n    );\r\n};\r\n\r\n\r\nconst mapActionsToProps = (dispatch) => {\r\n    return {\r\n        changeUserAndCompany: bindActionCreators(changeUserAndCompany, dispatch)\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(null, mapActionsToProps)(LoginForm));\r\n"]},"metadata":{},"sourceType":"module"}